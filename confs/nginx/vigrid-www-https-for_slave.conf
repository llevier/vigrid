#
# Vigrid HTTPS for direct slave access %%SLAVE_HOST%%, %%SLAVE_IP%%:%%SLAVE_PORT%%
#
# Please ensure gns3 password is the same on slaves as on master:
#   egrep "^(user|password)" /home/gns3/.config/GNS3/gns3_server.conf
server {
  listen 127.0.0.1:443 ssl;
  server_name %%SLAVE_HOST%% %%SLAVE_FQDN%%;

  # Take fullchain here, not cert.pem
  ssl_certificate      /etc/nginx/ssl/localhost.crt;
  ssl_certificate_key  /etc/nginx/ssl/localhost.key;

  ssl_session_cache    builtin:1000 shared:SSL:1m;
  ssl_session_timeout  5m;

  ssl_protocols              TLSv1.3;
  ssl_ciphers                HIGH:!aNULL:!MD5;
  ssl_prefer_server_ciphers  on;

  # hide version
  server_tokens        off;

  access_log /var/log/nginx/access-%%SLAVE_HOST%%.log;
  error_log /var/log/nginx/error-%%SLAVE_HOST%%.log;

  # Vigrid API
  location ^~ /vigrid-api
  {
    auth_request     /auth;

    auth_request_set $auth_status $upstream_status;
    auth_request_set $auth_header $upstream_http_authorization;

    proxy_set_header Host $host;
    proxy_set_header Authorization $auth_header;

    proxy_pass_request_body on;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'Upgrade';

    proxy_pass https://%%SLAVE_IP%%;
  }

  location ^~ /static
  {
    auth_request_set $auth_status $upstream_status;
    auth_request_set $auth_header $upstream_http_authorization;

    proxy_set_header Host $host;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'Upgrade';

    access_by_lua_block
    {
      if ngx.var.http_authorization ~= nil and ngx.var.http_authorization:sub(0, 6) == 'Basic ' then

        -- Extract Basic auth
        auth_creds=string.gsub(ngx.var.http_authorization,'^Basic ','',1)
        local vigrid_creds = ngx.decode_base64(auth_creds)

        -- Splitting credentials
        local vigrid_user=string.gsub(vigrid_creds,':.*$','',1)
        local vigrid_pass=string.gsub(vigrid_creds,'^.*:','',1)
        if vigrid_user == '' or vigrid_pass == '' then
          ngx.log(ngx.ERR, 'Unknown Vigrid credentials (', vigrid_creds, ') not granted to pass')
          ngx.exit(401)
          return
        end

        -- Check user is granted to pass
        local grep_str=string.format("egrep '^%s:{PLAIN}%s$' /home/gns3/etc/vigrid-passwd",vigrid_user,vigrid_pass)
        local p = io.popen(grep_str)
        local vigrid_check = p:read('*l')
        p:close()
        
        if vigrid_check == nil then
          ngx.log(ngx.ERR, 'Unknown Vigrid credentials (', vigrid_creds, ') not granted to pass')
          ngx.exit(401)
          return
        end

        -- Yes ? Extract user/pass from gns3_server.conf
        local p = io.popen("egrep '^(user|password)\\s*=' /home/gns3/.config/GNS3/gns3_server.conf")
        local res_user = p:read('*l')
        local res_pass = p:read('*l')
        p:close()
        gns_user=string.gsub(res_user,'^user[ ]+=[ ]+','',1)
        gns_pass=string.gsub(res_pass,'^password[ ]+=[ ]+','',1)

        -- Build base64 header
        local basic = string.format('%s:%s',gns_user,gns_pass)
        local basicb64 = ngx.encode_base64(basic,false)

        -- Replace authorization
        authorization = string.format('Basic %s',basicb64)
        ngx.req.set_header('Authorization', authorization)

        return
      end
    }

    proxy_pass http://%%SLAVE_IP%%:%%SLAVE_PORT%%;
  }

  location ^~ /v2
  {
    auth_request_set $auth_status $upstream_status;
    auth_request_set $auth_header $upstream_http_authorization;

    proxy_set_header Host $host;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'Upgrade';

    access_by_lua_block
    {
      if ngx.var.http_authorization ~= nil and ngx.var.http_authorization:sub(0, 6) == 'Basic ' then

        -- Extract Basic auth
        auth_creds=string.gsub(ngx.var.http_authorization,'^Basic ','',1)
        local vigrid_creds = ngx.decode_base64(auth_creds)

        -- Splitting credentials
        local vigrid_user=string.gsub(vigrid_creds,':.*$','',1)
        local vigrid_pass=string.gsub(vigrid_creds,'^.*:','',1)
        if vigrid_user == '' or vigrid_pass == '' then
          ngx.log(ngx.ERR, 'Unknown Vigrid credentials (', vigrid_creds, ') not granted to pass')
          ngx.exit(401)
          return
        end

        -- Check user is granted to pass
        local grep_str=string.format("egrep '^%s:{PLAIN}%s$' /home/gns3/etc/vigrid-passwd",vigrid_user,vigrid_pass)
        local p = io.popen(grep_str)
        local vigrid_check = p:read('*l')
        p:close()
        
        if vigrid_check == nil then
          ngx.log(ngx.ERR, 'Unknown Vigrid credentials (', vigrid_creds, ') not granted to pass')
          ngx.exit(401)
          return
        end

        -- Yes ? Extract user/pass from gns3_server.conf
        local p = io.popen("egrep '^(user|password)\\s*=' /home/gns3/.config/GNS3/gns3_server.conf")
        local res_user = p:read('*l')
        local res_pass = p:read('*l')
        p:close()
        gns_user=string.gsub(res_user,'^user[ ]+=[ ]+','',1)
        gns_pass=string.gsub(res_pass,'^password[ ]+=[ ]+','',1)

        -- Build base64 header
        local basic = string.format('%s:%s',gns_user,gns_pass)
        local basicb64 = ngx.encode_base64(basic,false)

        -- Replace authorization
        authorization = string.format('Basic %s',basicb64)
        ngx.req.set_header('Authorization', authorization)

        return
      end
    }

    proxy_pass http://%%SLAVE_IP%%:%%SLAVE_PORT%%;
  }
  
  location = /auth
  {
    internal;
    
    proxy_pass             http://localhost:8001;
    proxy_pass_request_body off;

    proxy_set_header        Content-Length '';
    proxy_set_header        X-Original-URI $request_uri;
    proxy_set_header        X-Original-Host $host;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Host $server_name;  
  }
}
