#!/usr/bin/php
<?php
#################################################################################################################################
##
## This material is part of VIGRID extensions to GNS3 for Trainings & CyberRange designs
##
## (c) Laurent LEVIER for script, designs and technical actions, https://github.com/llevier/
## LICENCE: Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA)
##
## Each dependancies (c) to their respective owners
##
##################################################################################################################################
// hide notices
// ini_set('error_reporting', E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED);
// error_reporting(E_ERROR | E_PARSE);

require 'Net/SMTP.php';

// Dry run mode ? 2=do nothing, 1=dont clone but do all jobs.
// $dry_run=2;
$dry_run=0;

// GNS3 home directory
$gns_home="/home/gns3";

// GNS3 functions
include "/home/gns3/vigrid/www/site/manager/vigrid-gns3_functions.php";

// turn off output buffering
ob_implicit_flush();

$verbose=0;
$daemon=0;
// ini_set("register_argc_argv=On");
$opt=getopt("vdl:");
if (isset($opt['v'])) { $verbose=1; }
if (isset($opt['d'])) { $daemon=1; }
if (isset($opt['l'])) { $log_file=$opt['l']; }

// Getting Vigrid config
$vigrid_type=VIGRIDconfig("VIGRID_TYPE");

$sshkey_options=VIGRIDconfig("VIGRID_SSHKEY_OPTIONS");

$nas_server_list=VIGRIDconfig("VIGRID_NAS_SERVER");
$t=explode(":",$nas_server_list);
$nas_server=$t[0];

$vigrid_storage_mode=strtoupper(VIGRIDconfig("VIGRID_STORAGE_MODE"));
$vigrid_storage_root=VIGRIDconfig("VIGRID_STORAGE_ROOT");

// NAS stuff
$sshkey_nas=VIGRIDconfig("VIGRID_SSHKEY_NAS");

if (($vigrid_type >1) && (($sshkey_nas=="") || (!file_exists($sshkey_nas))))
{ report("ERROR: Vigrid in NAS mode and I cant find a SSH authentication key for NAS, exiting\n"); exit(1); }

$SSHdo="ssh -i $sshkey_nas $sshkey_options";

if (($vigrid_type>1) && (($vigrid_storage_mode=="") || ($vigrid_storage_root=="") || $nas_server==""))
{ report("ERROR: Vigrid in NAS mode and I cant find some NAS details (NAS=$nas_server, mode=$vigrid_storage_mode, root=vigrid_storage_root, exiting\n"); exit(1); }

// MySQL
$mysql_host=VIGRIDconfig("VIGRID_MYSQL_HOST");
$mysql_user=VIGRIDconfig("VIGRID_MYSQL_USER");
$mysql_pass=VIGRIDconfig("VIGRID_MYSQL_PASS");

if (($mysql_user=="") || ($mysql_pass==""))
{ report("ERROR: MySQL credentials not found, exiting\n"); exit(1); }

$mysql_database="Vigrid";
$mysql_table="list";

// Misc
$mail_template_creation="/home/gns3/etc/clone_mail_template_creation.txt";

$host=gethostname();
$control_tower="http://$host";

# Getting real physical location of project
if ($vigrid_type==1) { $gns3_home="/home/gns3/GNS3"; }
else if  (($vigrid_type==2) ||  ($vigrid_type==5)) { $gns3_home="$vigrid_storage_root/NFS/$host/GNS3mount/GNS3"; }
else if  (($vigrid_type==3) ||  ($vigrid_type==4)) { $gns3_home="$vigrid_storage_root/GNS3/GNS3farm/GNS3"; }
else { report("Unknown Vigrid type ($vigrid_type), exiting\n");  exit(1); }

report("$host Vigrid Cloning Daemon starting at ".strftime("%F %T",time())."...\n");

// Capture SIGTERM
declare(ticks = 1);
pcntl_signal(SIGTERM,"sig_handler");
pcntl_signal(SIGINT ,"sig_handler");

if ($verbose) { report("  verbose=on\n"); }
// turn to daemon
if ($daemon)
{
  report("  turning to daemon...\n");
  
  $pid=pcntl_fork();
  if ($pid===-1)
  { die("Couldn't fork()!"); }
  else if ($pid) { exit(0); }

  posix_setsid();
  usleep(100000);

  report("   Daemon now running on ".posix_getpid()."\n");
}

// To avoid program to stop upon some failures...
mysqli_report(MYSQLI_REPORT_OFF);

if ($verbose)
{ report("  Connecting to MySQL DSN $mysql_host as $mysql_user ($mysql_pass)..."); }
else
{ report("  Connecting to MySQL..."); }
$dbh=mysqli_connect($mysql_host,$mysql_user,$mysql_pass);
if (!$dbh) { report('cant connect to MySQL ('.$mysql_host.'): '.mysqli_connect_error()."(errno=".mysqli_connect_errno()."), I cant create '$mysql_database' database if required.\n"); exit(1); }
report("connected\n");

// Database does not exist
if (!mysqli_select_db($dbh,$mysql_database)) 
{
  report("  cant use $mysql_database database, please connect to MySQL and run:
    DROP DATABASE $mysql_database IF EXISTS;
    CREATE DATABASE $mysql_database;
    GRANT ALL on $mysql_database.* TO '$mysql_user'@'%' identified by '$mysql_pass';

  Exiting !");
  exit (1);
}
// Check table exists...
else 
{
  // Table should contain target host, project name, uuid, lifetime, creation_time_t, owner_email
  $query="SELECT Phost_source,Pname_source,Puuid_source,Pversion_source,Phost_target,Pname_target,Puuid_target,Plifetime,UNIX_TIMESTAMP(Pcreatime),Powner,Powner_pass FROM $mysql_database.$mysql_table;";
  if (!($result=mysqli_query($dbh, $query)))
  {
    report("  cant use $mysql_database.$mysql_table, recreating table...");

    $query="DROP TABLE IF EXISTS $mysql_database.$mysql_table;";
    if (!mysqli_query($dbh, $query))
    { report("ERROR: Could not able to execute $query: " . mysqli_error($dbh).". Exiting...\n"); exit(1); }

    $query="CREATE TABLE IF NOT EXISTS $mysql_database.$mysql_table (
    Phost_source varchar(32),
    Pname_source varchar(255),
    Puuid_source varchar(40),
    Pversion_source varchar(32),
    Phost_target varchar(32),
    Pname_target varchar(255),
    Puuid_target varchar(40),
    Plifetime int,
    Pcreatime datetime,
    Powner varchar(255),
    Powner_pass varchar(32)) ENGINE=MyISAM;";
    if (mysqli_query($dbh, $query))
    { report("Table created successfully\n"); }
    else
    { report("ERROR: Could not able to execute $query: " . mysqli_error($dbh).". Exiting...\n"); exit(1); }

    $query="CREATE INDEX Ihost_source on $mysql_database.$mysql_table(Phost_source);";
    if (mysqli_query($dbh, $query))
    { report("    Index Ihost created successfully\n"); }
    else
    { report("    ERROR: Could not able to execute $query: " . mysqli_error($dbh).". Exiting...\n"); exit(1); }

    $query="CREATE INDEX Icreatime on $mysql_database.$mysql_table(Pcreatime);";
    if(mysqli_query($dbh, $query))
    { report("    Index Icreatime created successfully\n"); }
    else
    { report("    ERROR: Could not able to execute $query: " . mysqli_error($dbh).". Exiting...\n"); exit(1); }

    $query="CREATE INDEX Iowner on $mysql_database.$mysql_table(Powner);";
    if(mysqli_query($dbh, $query))
    { report("    Index Iowner created successfully\n"); }
    else
    { report("    ERROR: Could not able to execute $query: " . mysqli_error($dbh).". Exiting...\n"); exit(1); }
  }
}

$mark=0;
report("  Now infinite looping...\n");

while (1)
{
  if ($mark++>60) { $mark=0; report("I am still alive...\n"); }

  // if no creation_time_t, task to do.
  // else check creation_time_t+lifetime<current_time and delete if needed

  $time_current=time();
  if ($verbose==1) { report("    ".strftime("%F %T",$time_current).": Querying for actions.\n"); }

  $query="SELECT Phost_source,Pname_source,Puuid_source,Pversion_source,Phost_target,Pname_target,Puuid_target,Plifetime,UNIX_TIMESTAMP(Pcreatime),Powner,Powner_pass FROM $mysql_database.$mysql_table;";
  if(!($result=mysqli_query($dbh, $query)))
  { report("    ERROR: Could not able to execute $query: " . mysqli_error($dbh).". Exiting...\n"); exit(1); }
  else
  {
    while ($row = mysqli_fetch_row($result))
    {
      $Phost_source=$row[0];
      $Pname_source=$row[1];
      $Puuid_source=$row[2];
      $Pversion_source=$row[3];

      $Phost_target=$row[4];
      $Pname_target=$row[5];
      $Puuid_target=$row[6];

      $Plifetime=$row[7];
      $Pcreatime=$row[8];
      $Powner=$row[9];
      $Powner_pass=$row[10];

      // TESTINGS !!!
      // $Plifetime=1;

      // get controller configuration to extract Vigrid hosts...
      unset($gns_controller);
      $gns_controller=gns_getcontrollers();

      unset($data_vigrid);
      $data_vigrid=VIGRIDgetgnsdata($gns_controller);

      // Sanity/malicious checks
      $t=gns_getprojectname_by_projectuuid($gns_controller,$data_vigrid,$Puuid_source);
      if ($t!=$Pname_source)
      {
        report("Malicious or corrupted request, erasing it (Pname_source=$Pname_source, real=$t\n");
        $query ="DELETE FROM $mysql_database.$mysql_table WHERE Phost_source='$Phost_source' AND Pname_source='$Pname_source' ";
        $query.="AND Puuid_source='$Puuid_source' AND Powner='$Powner' AND Pcreatime=0;";
        
        if(!($res=mysqli_query($dbh, $query)))
        { report("    ERROR: Could not able to execute $query: " . mysqli_error($dbh).". Exiting...\n"); exit(1); }
        mysqli_free_result($res);
        
        unset($data_vigrid);
        unset($gns_controller);

        break;
      }

      $gns_server=gns_getserver_config();

      $console_range_start=$gns_server['console_start_port_range'];
      $console_range_end=$gns_server['console_end_port_range'];
      
      if (($Pcreatime==0) || ($Pcreatime=='NULL')) // Not created yet, action !
      {
        report("      Detected cloning request: $Pname_source ($Puuid_source/$Pversion_source) from $Phost_source for ".$Plifetime."m by $Powner\n");
         
        // Creating clone...
        // Evaluate where to clone, define new Pname, target host, then launch
        // From launch, update Phost, collect new Puuid & Pcreatime
        $creation_done=0;
        $creation_time=0;

        $Phost_target=$Phost_source;
        $Pname_target=$Pname_source."_clone".time();
        $Puuid_target="";
        
        $duplog_file="/tmp/DupHost_".time();

        // Launch cloning script...
        report("        Cloning in progress...");

        $command="/home/gns3/vigrid/bin/project-lowlevel-clone-$vigrid_storage_mode -r $log_file";

        $command.=" -G $gns3_home -P $gns3_home/projects -R $vigrid_storage_root";
        $command.=" -Z \"clonesource_$Pversion_source\" -s $Puuid_source -S \"$Pname_source\"";
        $command.=" -T \"$Pname_target\" -c $console_range_start -e $console_range_end";
          
        $get_duplog_file="cat $duplog_file";
        
        list($creation_done,$Puuid_target)=CLONErun($command,$get_duplog_file);
        
        if ($creation_done==1) // successfull
        {
          report("        Sleeping 6s in case of ZFSexport daemon...\n");
          sleep(6);
          report("        Reloading target GNS3 server (until API is updated)...\n");
          $command="sudo /home/gns3/vigrid/bin/vigrid-run -M -A '/usr/sbin/service gns3 reload'";

          list($rc,$res)=get_exec($command,"",false);
          if ($rc==0) { report("          GNS3 reloaded\n"); }
          else
          { report("          GNS3 failed reloading\n"); }

          $Pcreatime=strftime("%F %T",time());
          report("        Clone $Pname_target ($Puuid_target) on host $Phost_target created at $Pcreatime\n");
          
          $query="UPDATE $mysql_database.$mysql_table set Phost_target='$Phost_target',Pname_target='$Pname_target',";
          $query.="Puuid_target='$Puuid_target',Pcreatime='$Pcreatime' ";
          $query.="WHERE Phost_source='$Phost_source' AND Pname_source='$Pname_source' AND Puuid_source='$Puuid_source' AND Powner='$Powner';";
          if ($dry_run<=1)
          {
            if(!($res=mysqli_query($dbh, $query)))
            { report("    ERROR: Could not able to execute $query: " . mysqli_error($dbh).". Exiting...\n"); exit(1); }
            mysqli_free_result($res);
          }
          else
          { report("\n      dry_run=2, would have SQL:\n      $query"); }
          
          // Finally get console details (mail template=$mail_template) to send to requesting user Powner
          $mail_body=array();
          $fd=fopen($mail_template_creation,"r");
          if ($fd)
          {
            while (($line = fgets($fd, 4096)) !== false)
            { array_push($mail_body,$line); }
            fclose($fd);
          }
          else
          {
            array_push($mail_body,"Dear %%Powner%%");
            array_push($mail_body,"");
            array_push($mail_body,"Your clone of project <B>%%Pname_source%%</B> is now available as <B>%%Pname_target%%</B>.");
            array_push($mail_body,"It has the UUID <B>%%Puuid_target%%</B> and runs on <B>%%Phost_target%%</B>");
            array_push($mail_body,"");
            array_push($mail_body,"You can access and control it with the <A HREF=\"%%CONTROL_TOWER%%\">Control Tower</A>");
            array_push($mail_body,"");
            array_push($mail_body,"Clone will be automatically terminated in <FONT COLOR=Red><B><U>%%Plifetime%%</U></B></FONT> minutes.");
            array_push($mail_body,"");
            array_push($mail_body,"Thank you");
            array_push($mail_body,"");
          }

          for ($l=0;$l<sizeof($mail_body);$l++)
          {
            $mail_body[$l]=preg_replace("/%%Phost_source%%/",$Phost_source,$mail_body[$l]);
            $mail_body[$l]=preg_replace("/%%Pname_source%%/",$Pname_source,$mail_body[$l]);
            $mail_body[$l]=preg_replace("/%%Puuid_source%%/",$Puuid_source,$mail_body[$l]);

            $mail_body[$l]=preg_replace("/%%Phost_target%%/",$Phost_target,$mail_body[$l]);
            $mail_body[$l]=preg_replace("/%%Pname_target%%/",$Pname_target,$mail_body[$l]);
            $mail_body[$l]=preg_replace("/%%Puuid_target%%/",$Puuid_target,$mail_body[$l]);

            $mail_body[$l]=preg_replace("/%%Powner%%/",$Powner,$mail_body[$l]);
            $mail_body[$l]=preg_replace("/%%Plifetime%%/",$Plifetime,$mail_body[$l]);
            $mail_body[$l]=preg_replace("/%%Pcreatime%%/",strftime("%F %T",$Pcreatime),$mail_body[$l]);

            if ($dry_run==1)
            {
              $mail_body[$l]=preg_replace("/^/","(dry_run=1) ",$mail_body[$l]);
            }

            if (preg_match("/%%CONTROL_TOWER%%/",$mail_body[$l]))
            {
              $url="$control_tower/manager/clone_control_tower.html?clone_owner=".htmlentities($Powner)."&clone_owner_pass=".htmlentities($Powner_pass);
              $mail_body[$l]=preg_replace("/%%CONTROL_TOWER%%/",$url,$mail_body[$l]);
            }
            if (preg_match("/%%START%%/",$mail_body[$l]))
            {
              $url="$control_tower/manager/clone_control_tower.html?gnshost=".htmlentities($Phost_target);
              $url.="&project_name=".htmlentities($Pname_target)."&project_id=".htmlentities($Puuid_target)."&status=stopped";
              $mail_body[$l]=preg_replace("/%%START%%/",$url,$mail_body[$l]);
            }
            if (preg_match("/%%STOP%%/",$mail_body[$l]))
            {
              $url="$control_tower/manager/clone_control_tower.html?gnshost=".htmlentities($Phost_target);
              $url.="&project_name=".htmlentities($Pname_target)."&project_id=".htmlentities($Puuid_target)."&status=started";
              $mail_body[$l]=preg_replace("/%%STOP%%/",$url,$mail_body[$l]);
            }
            if (preg_match("/%%CONSOLES%%/",$mail_body[$l]))
            {
              $mail_body[$l]="";
              
              // Insert consoles here
              $nodes=gns_getnodes($gns_controller,$Phost_target,$Puuid_target);
        
              // alpha sort nodes...
              usort($nodes, 'compare_name');

              $consoles_details=array();
              for ($k=0;$k<sizeof($nodes);$k++)
              {
                $console_detail="- Node #".$k.": ".$nodes[$k]['name']." (".$nodes[$k]['node_id'].")";
                
                $uri="";
                if ($nodes[$k]['console_host']!="")
                {
                  if ($nodes[$k]['console']!="")
                  {
                    // normal URI for consoles
                    $uri=$nodes[$k]['console_type'].":";
                    // VNC reg hack (not great)
                    if ($nodes[$k]['console_type']!="vnc") { $uri=$uri."//"; }
                    $uri=$uri.$nodes[$k]['console_host'].":".$nodes[$k]['console'];
                    
                    // noVNC | noTELNET hack
                    if (($nodes[$k]['console_type']=="vnc") || ($nodes[$k]['console_type']=="telnet"))
                    {
                      $rc=websockify_check($nodes[$k]['console_host'],$nodes[$k]['console']);
                      if ($rc>0)
                      {
                        $uri="$control_towser:".$rc;
                        if ($nodes[$k]['console_type']=="vnc") { $uri=$uri."/vnc.html?autoconnect=1"; }
                      }
                    }
                  }
                  else
                  { $uri.="no console"; }
                }
                if ($uri!="")
                { $console_detail.=", ".$uri; }
                array_push($consoles_details,$console_detail);
              }
              array_splice($mail_body, $l, 0, $consoles_details );
            }
          }

          $smtp_mailfrom=VIGRIDconfig("VIGRID_SMTP_MAILFROM");
          if ($smtp_mailfrom=="") { $smtp_mailfrom="noreply@$host"; }

          $subject="$host clone of '$Pname_source' is now ready.";
          $headers = 'From: noreply@$host' . "\r\n" .
            'Reply-To: $Powner' . "\r\n" .
            'MIME-Version: 1.0' . "\r\n" .
            'Content-type: text/html; charset=iso-8859-1' . "\r\n" .
            'X-Mailer: PHP/' . phpversion(). "\r\n" . $subject . "\r\n";

          if ($dry_run<2)
          {
            $smtp_details=VIGRIDconfig("VIGRID_SMTP_RELAY");
            if ($smtp_details=="")
            { report("        Cant get SMTP relay details from Vigrid.conf, failed\n"); }
            else
            {
              $f=explode(":",$smtp_details);
              $smtp_host=$f[0];
              $smtp_ip=$f[1];
              $smtp_port=$f[2];
              if ($smtp_port=="") { $smtp_port="25"; }
              
              if ($smtp_mailfrom=="") { $smtp_mailfrom="noreply@$host"; }
              report("        Vigrid said mail relay will be $smtp_host ($smtp_ip), port $smtp_port, mail from = $smtp_mailfrom\n");

              report("        Now sending mail to $Powner with clone control details\n");
              if (!($smtp=new Net_SMTP($smtp_ip, $smtp_port)))      { report("        \nERROR, unable to create SMTP object\n"); }
              if (PEAR::isError($sm = $smtp->connect()))            { report("        \nERROR, unable to connect to SMTP server: ".$sm->getMessage()."\n"); }
              if (PEAR::isError($smtp->mailFrom($smtp_mailfrom)))   { report("        \nERROR, unable to MAIL FROM with SMTP server\n"); }
              if (PEAR::isError($res = $smtp->rcptTo($Powner)))     { report("        \nERROR, unable to add recipient ($Powner) with SMTP server:".$res->getMessage()."\n"); }
              if (PEAR::isError($smtp->data($smtp->data($mail_body,$headers)))) { report("        \nERROR, unable to set mail body with SMTP server\n"); }
              $smtp->disconnect();
            }
          }
          else
          { report("\n          dry_run=2, no email sending\n"); }
        }
        else
        {
          report("        Clone $Pname_target duplication failed\n");
        }
      }
      else
      {
        $Plife=time()-$Pcreatime;
        if ($Plife>$Plifetime*60)
        {
          if ($dry_run<2)
          {
            report("      Detected termination: $Pname_target ($Puuid_target) on $Phost_target, cloned for ".$Plifetime."m by $Powner, created at ".strftime("%F %T",$Pcreatime)."\n");

            report("      Requesting GNS3 project ($Puuid_target) to $Phost_target: auto_open=false, auto_close=true, auto_start=false...");
            $order_data=array("auto_open" => "false", "auto_close" => "true", "auto_start" => "false");
            $res=gns_project_command($gns_controller,$Phost_target,$Puuid_target,"",$order_data);
            if ($res==null) { report("        \nWARNING, GNS API update call returned NULL !!\n"); }
            else { report("        Output: ".print_r($res,true)."\n"); }

            report("      Requesting GNS3 project ($Puuid_target) closing to $Phost_target...");
            $res=gns_project_command($gns_controller,$Phost_target,$Puuid_target,"close");
            if ($res==null) { report("        \nWARNING, GNS API close call returned NULL !!\n"); }
            else { report("        Output: ".print_r($res,true)."\n"); }
            
            // Checking directory exists
            if (file_exists("$gns_home/GNS3/projects/$Puuid_target/TBD_$Puuid_target"))
            { $project_still_not_deleted=1; }
            $project_is_finally_deleted=0;
            
            if (is_dir("$gns_home/GNS3/projects/$Puuid_target"))
            {
              report("      Marking directory for deletion");
              $rc=touch("$gns_home/GNS3/projects/$Puuid_target/TBD_$Puuid_target");
              if ($rc!=0) { report("      touch '$gns_home/GNS3/projects/$Puuid_target/TBD_$Puuid_target' failed"); }
              
              // report("      Requesting GNS3 project $Puuid_target status to $Phost_target...");
              // $res=gns_project_command($gns_controller,$Phost_target,$Puuid_target,"status");
              // report("        Output: ".print_r($res,true)."\n");

              // report("      Requesting GNS3 project $Puuid_target deletion to $Phost_target...");
              // $res=gns_project_delete($gns_controller,$Phost_target,$Puuid_target);
              // report("        Output: ".print_r($res,true)."\n");

              // DO NOT rm -rf project_data since clone-$vigrid_storage_mode will check project_name.gns3 exists to step forward...

              $command="/home/gns3/vigrid/bin/project-lowlevel-clone-$vigrid_storage_mode -r $log_file";
              $command.=" -D $Puuid_target -T '$Pname_target'";

              $get_duplog_file="cat $duplog_file";
              
              list($rc,$Puuid_target)=CLONErun($command,$get_duplog_file);
            
              if ($rc!=0)
              { report("($method) failed ($output)!!\n"); }
              else
              {
                report("($method) success.\n");
              $project_is_finally_deleted=1;
              }
            }
            else
            { report("      ### ERROR: Vigrid Cloning Daemon DB inconsistency, project directory not present, considering $Pname_target ($Puuid_target) project terminated"); }

            // From here, project should no longer be accessible by GNS client, either data deleted or NFS forbidden
            report("      Sleeping 6s in case of ZFSexport daemon...\n");
            sleep(6);
            report("      Reloading GNS3 server...");
            $command="sudo /home/gns3/vigrid/bin/vigrid-run -M -A '/usr/sbin/service gns3 reload'";

            list($rc,$res)=get_exec($command,"",false);
            if ($rc==0) { report("reloaded\n"); }
            else
            { report("failed reloading\n"); }

            // If project is really deleted, update database accordingly.
            // Else, Vigrid-cloning will check directory and attempt to destroy it until it succeeds
            if (($project_still_not_deleted==0) && ($project_is_finally_deleted==1))
            {
              // Backup MySQL data to table_old
              $query="CREATE TABLE IF NOT EXISTS $mysql_database.$mysql_table"."_old LIKE $mysql_database.$mysql_table";
              $res=mysqli_query($dbh, $query);
              mysqli_free_result($res);

              $query="INSERT INTO $mysql_database.$mysql_table"."_old SELECT * from $mysql_database.$mysql_table ";
              $query.="WHERE Phost_source='$Phost_source' AND Pname_source='$Pname_source' AND Puuid_source='$Puuid_source' AND Pversion_source='$Pversion_source' AND Powner='$Powner' AND Powner_pass='$Powner_pass' ";
              $query.="AND Phost_target='$Phost_target' AND Pname_target='$Pname_target' AND Puuid_target='$Puuid_target' AND Pcreatime='".strftime("%F %T",$Pcreatime)."';";
              if(!($res=mysqli_query($dbh, $query)))
              { report("    ERROR: Could not backup record:\n      $query: " . mysqli_error($dbh)."\n"); }
              mysqli_free_result($res);

              $query="DELETE FROM $mysql_database.$mysql_table ";
              $query.="WHERE Phost_source='$Phost_source' AND Pname_source='$Pname_source' AND Puuid_source='$Puuid_source' AND Pversion_source='$Pversion_source' AND Powner='$Powner' ";
              $query.="AND Phost_target='$Phost_target' AND Pname_target='$Pname_target' AND Puuid_target='$Puuid_target';";

              if(!($res=mysqli_query($dbh, $query)))
              { report("    ERROR: Could not able to execute $query: " . mysqli_error($dbh).". Exiting...\n"); exit(1); }
              mysqli_free_result($res);
            }

            // Finally send termination email to requesting user Powner
            if ($project_still_not_deleted==0)
            {
              $mail_body=array();
              $fd=fopen($mail_template_deletion,"r");
              if ($fd)
              {
                while (($line = fgets($fd, 4096)) !== false)
                { array_push($mail_body,$line); }
                fclose($fd);
              }
              else
              {
                array_push($mail_body,"Dear %%Powner%%");
                array_push($mail_body,"");
                array_push($mail_body,"Your clone of project <B>%%Pname_source%%</B> that was available as <B>%%Pname_target%%</B>.");
                array_push($mail_body,"with the UUID <B>%%Puuid_target%%</B>, running on <B>%%Phost_target%%</B> has been terminated.");
                array_push($mail_body,"");
                array_push($mail_body,"For recall, it was created at %%Pcreatime%% for a lifetime of %%Plifetime%% minutes.");
                array_push($mail_body,"");
                array_push($mail_body,"We hope it served you well.");
                array_push($mail_body,"");
                array_push($mail_body,"Thank you");
                array_push($mail_body,"");
              }

              for ($l=0;$l<sizeof($mail_body);$l++)
              {
                $mail_body[$l]=preg_replace("/%%Phost_source%%/",$Phost_source,$mail_body[$l]);
                $mail_body[$l]=preg_replace("/%%Pname_source%%/",$Pname_source,$mail_body[$l]);
                $mail_body[$l]=preg_replace("/%%Puuid_source%%/",$Puuid_source,$mail_body[$l]);

                $mail_body[$l]=preg_replace("/%%Phost_target%%/",$Phost_target,$mail_body[$l]);
                $mail_body[$l]=preg_replace("/%%Pname_target%%/",$Pname_target,$mail_body[$l]);
                $mail_body[$l]=preg_replace("/%%Puuid_target%%/",$Puuid_target,$mail_body[$l]);

                $mail_body[$l]=preg_replace("/%%Powner%%/",$Powner,$mail_body[$l]);
                $mail_body[$l]=preg_replace("/%%Powner_pass%%/",$Powner_pass,$mail_body[$l]);
                $mail_body[$l]=preg_replace("/%%Plifetime%%/",$Plifetime,$mail_body[$l]);
                $mail_body[$l]=preg_replace("/%%Pcreatime%%/",strftime("%F %T",$Pcreatime),$mail_body[$l]);
              }

              $smtp_mailfrom=VIGRIDconfig("VIGRID_SMTP_MAILFROM");
              if ($smtp_mailfrom=="") { $smtp_mailfrom="noreply@$host"; }

              $subject="$host clone of '$Pname_source': 'Pname_target' is now terminated.";
              $headers = 'From: noreply@$host' . "\r\n" .
               'Reply-To: $Powner' . "\r\n" .
               'MIME-Version: 1.0' . "\r\n" .
               'Content-type: text/html; charset=iso-8859-1' . "\r\n" .
               'X-Mailer: PHP/' . phpversion() . "\r\n" . $subject . "\r\n";

              if ($dry_run<2)
              {
                $smtp_details=VIGRIDconfig("VIGRID_SMTP_RELAY");
                $smtp_mailfrom=VIGRIDconfig("VIGRID_SMTP_MAILFROM");
                if ($smtp_details=="")
                { report("        Cant get SMTP relay details from Vigrid.conf, failed\n"); }
                else
                {
                  $f=explode(":",$smtp_details);
                  $smtp_host=$f[0];
                  $smtp_ip=$f[1];
                  $smtp_port=$f[2];
                  if ($smtp_port=="") { $smtp_port="25"; }
                  
                  if ($smtp_mailfrom=="") { $smtp_mailfrom="noreply@$host"; }
                  report("        Vigrid said mail relay will be $smtp_host ($smtp_ip), port $smtp_port, mail from = $smtp_mailfrom\n");

                  report("        Now sending termination mail to $Powner\n");
                  if (!($smtp=new Net_SMTP($smtp_ip, $smtp_port)))      { report("        \nERROR, unable to create SMTP object\n"); }
                  if (PEAR::isError($sm = $smtp->connect()))            { report("        \nERROR, unable to connect to SMTP server: ".$sm->getMessage()."\n"); }

                  if (PEAR::isError($smtp->mailFrom($smtp_mailfrom)))   { report("        \nERROR, unable to MAIL FROM with SMTP server\n"); }
                  if (PEAR::isError($res = $smtp->rcptTo($Powner)))     { report("        \nERROR, unable to add recipient ($Powner) with SMTP server:".$res->getMessage()."\n"); }

                  if (PEAR::isError($smtp->data($mail_body,$headers))) { report("        \nERROR, unable to set mail body with SMTP server\n"); }

                  $smtp->disconnect();
                  report("        Mail (L502) sent to $Powner\n");
                }
              }
              else
              { report("\n          dry_run=2, ignoring dead clones\n"); }
            }
          }
          else
          { report("\n          dry_run=2, ignoring dead clones\n"); }
        }
      }
    }
    mysqli_free_result($result);
  }

  sleep(5);
}

mysqli_close($dbh);

exit;

function CLONErun($command,$get_duplog_file)
{
  global $dry_run;
  
  $Puuid_target="";
  $creation_done=0;
  
  if (($dry_run<1) && ($command!=""))
  { exec($command,$output,$rc); }
  else
  {
    report("\n          dry_run>=1, would have launched (successfully) subcommand\n");
    $rc=0;
  }
  
  report("\n            C=$command\n            OUTPUT:\n".print_r($output,true)."\n");

  $duplicate_output=array();
  if ($dry_run<1)
  {
    $fd=popen($get_duplog_file,"r");
    if (!$fd) { report("Cant open $duplog_file !!, stopping\n"); exit(1); }
    while (($line = fgets($fd, 4096)) !== false)
    {
      array_push($duplicate_output,$line);
      report("            $line");
    }
    pclose($fd);

    if ($rc!=0)
    {
      report("Execution error for:\n$command\n, exiting.\n");
      return(array(-1,$Puuid_target));
    }
    else
    {
      report("done\n");
      // Extracting data from log_file
      $line=preg_grep("/Target project uuid .*[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}/i",$duplicate_output);
      sort($line);
      $f=preg_split("/\s+/",$line[0]);
      for ($t=0;$t<sizeof($f);$t++)
      {
        if (($l=preg_match("/[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}/",$f[$t])))
        { $Puuid_target=$f[$t]; break; }
      }

      $creation_done=1;
    }
  }
  else
  {
    report("\n          dry_run>=1, ignoring log file ($duplog_file)\n");

    $creation_done=1;
    $Puuid_target=gen_uuid();
    report("\n          dry_run>=1, considering creation done, generating a fake Puuid_target: $Puuid_target\n");
  }
  
  return(array($creation_done,$Puuid_target));
}

function get_exec($command,$prefix,$display)
{
  $res=array();

  $fd=popen("$command 2>/dev/null","r");
  while (!feof($fd))
  {
    $line=fgets($fd,4096);
    array_push($res,$line);
    if ($display) { report($prefix.$line); ob_implicit_flush(); }
  }
  fclose($fd);
  
  return($res);
}

function report($text)
{
  global $log_file;
  
  // Jun 22 10:19:49 Singularity sudo
  $date=date("M j G:i:s");
  $hostname=gethostname();
  
  if ($log_file!="")
  {
    $fd=fopen($log_file,"a");
    if (!$fd) { report("Cant append $log_file !!, stopping\n"); }

    fwrite($fd,"$date $hostname Vigrid-cloning: $text");

    fclose($fd);
  }
  else { print $text; }
}

function sig_handler($signo)
{
  if (($signo==SIGTERM) || ($signo==SIGINT))
  {
    report("Received SIGTERM or SIGINT, exiting at ".strftime("%F %T",time()).".\n");
    exit(0);
  }

  // other signals, normally useless
  report("Received signal $signo !!");
}

?>
