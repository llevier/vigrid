#!/bin/bash
#################################################################################################################################
#
# This material is part of VIGRID extensions to GNS3 for Trainings & CyberRange designs
#
# (c) Laurent LEVIER for script, designs and technical actions, https://github.com/llevier/
# LICENCE: Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA)
#
# Each dependancies (c) to their respective owners
#
#################################################################################################################################

VIGRID_CONF="/home/gns3/etc/vigrid.conf"
VIGRID_TRANSLATION_TABLE="/home/gns3/etc/vigrid-translation-table.conf"

if [ ! -r $VIGRID_CONF ]
then
  echo "$VIGRID_CONF file is missing, exiting"
  exit 1
fi

. $VIGRID_CONF
if [ $? -ne 0 ]
then
  echo "$VIGRID_CONF load failed, exiting"
  exit 1
fi

[ "x$VIGRID_GNS_VERSION" != "x2" -a "x$VIGRID_GNS_VERSION" != "x3" ] && VIGRID_GNS_VERSION=2

echo "Vigrid slave adder"
echo

CHK=`which ipcalc`
[ "x$CHK" = "x" ] && echo "ipcalc is missing, installing it..." && sudo apt install -y ipcalc

if [ $VIGRID_TYPE -ne 3 ]
then
  echo "I am sorry but this is not a Master Vigrid server. It cant control slaves. Exiting"
  exit 1
fi

if [ "x$VIGRID_GNS_SLAVE_HOSTS" != "x" ]
then
  echo "Current Vigrid slaves for this host:"
  for i in $VIGRID_GNS_SLAVE_HOSTS
  do
    SLAVE_HOST=`echo $i | awk 'BEGIN { FS=":"; } { print $1;}'`
    
    SLAVE_IP=`echo $i | awk 'BEGIN { FS=":"; } { print $2;}'`
    SLAVE_PORT=`echo $i | awk 'BEGIN { FS=":"; } { print $3;}'`
    
    echo "  $SLAVE_HOST		$SLAVE_IP:$SLAVE_PORT"
  done
  echo
fi

until false
do
  echo -n "Please provide IP address of the new slave: "
  read SLAVE_IP
  CHK=`ipcalc $SLAVE_IP|grep "INVALID ADDRESS"`
  if [ "x$CHK" = "x" ]
  then
    CHK=`echo $VIGRID_GNS_SLAVE_HOSTS|grep "$SLAVE_IP:"`
    [ "x$CHK" = "x" ] && break
    echo "I am sorry but that IP address is already present in Vigrid slaves list:"
    echo $VIGRID_GNS_SLAVE_HOSTS
    echo
  fi
  echo "  Not an IP address, try again"
done

until false
do
  echo -n "Please provide the GNS3 port of this slave: "
  read SLAVE_PORT
  if [ "x$SLAVE_PORT" != "x" ]
  then
    [ $SLAVE_PORT -gt 0 -a $SLAVE_PORT -lt 65536 ] && break
  fi
  echo "  Not a valid port number, try again"
done

until false
do
  echo -n "Please provide a hostname for this slave: "
  read SLAVE_HOST
  if [ "x$SLAVE_HOST" != "x" ]
  then
    CHK=`echo $VIGRID_GNS_SLAVE_HOSTS|grep "$SLAVE_HOST:"`
    [ "x$CHK" = "x" ] && break
    echo "I am sorry but that hostname is already present in Vigrid slaves list:"
    echo $VIGRID_GNS_SLAVE_HOSTS
    echo
  fi
done

until false
do
  echo -n "Please provide a *public* FQDN for this slave: "
  read SLAVE_FQDN
  if [ "x$SLAVE_FQDN" != "x" ]
  then
    CHK=`echo $SLAVE_FQDN|grep "^.*\..*\..*$"`
    [ "x$CHK" = "x" ] && break
    echo "I am sorry but '$SLAVE_FQDN' that does not look like a FQDN (host.domain.tld...)"
    echo
  fi
done

until false
do
  echo -n "You requested to add the following slave to Vigrid infrastructure:
  
Host:           $SLAVE_HOST
IP address:port $SLAVE_IP:$SLAVE_PORT
Public FQDN:    $SLAVE_FQDN

Do you confirm this [y/N] ? "
  read ANS
  [ "x$ANS" = "x" -o "x$ANS" = "xn" -o "x$ANS" = "xN" ] && exit
  [ "x$ANS" = "xy" -o "x$ANS" = "xY" ] && break
done

echo "Please:
  - Ensure traffic from this host to GNS3 & SSH ports of host $SLAVE_HOST are open and working fine.
  - Find the password of the 'gns3' user of host $SLAVE_HOST, it will be required later.

Press [RETURN] when ready."
read ANS

echo "  Adding host to /etc/hosts..."
CHK_IP=`cat /etc/hosts|sed 's/#.*$//' | grep "$SLAVE_IP"`
CHK_HOST=`cat /etc/hosts|sed 's/#.*$//' | grep "$SLAVE_HOST"`
if [ "x$CHK_IP" = "x" -a "x$CHK_HOST" = "x" ]
then
  echo "$SLAVE_IP $SLAVE_HOST" >>/etc/hosts
else
  echo "    Host or IP already defined, skipping:"
  [ "x$CHK_IP" != "x" ] && echo "      $CHK_IP"
  [ "x$CHK_HOST" != "x" ] && echo "      $CHK_HOST"
fi

echo "  Updating Vigrid API translation table $VIGRID_TRANSLATION_TABLE..."
[ -f $VIGRID_TRANSLATION_TABLE ] && touch $VIGRID_TRANSLATION_TABLE

CHK=`cat $VIGRID_TRANSLATION_TABLE 2>/dev/null | egrep "^$SLAVE_IP:$SLAVE_PORT=https://$SLAVE_FQDN"`
if [ "x$CHK" = "x" ]
then
  CHK=`cat $VIGRID_TRANSLATION_TABLE 2>/dev/null | egrep "^$SLAVE_IP:$SLAVE_PORT="`
  if [ "x$CHK" != "x" ]
  then
    echo "    WARNING !! There is already a translation for $SLAVE_IP:$SLAVE_PORT:"
    cat $VIGRID_TRANSLATION_TABLE 2>/dev/null | egrep "^$SLAVE_IP:$SLAVE_PORT=" | sed 's/^/    /g'
  else
    echo "$SLAVE_IP:$SLAVE_PORT=https://$SLAVE_FQDN" >>$VIGRID_TRANSLATION_TABLE
  fi
else
  echo "    Warning, $SLAVE_IP:$SLAVE_PORT=https://$SLAVE_FQDN already exists"
fi

echo "  Checking & updating OpenResty virtual hosts..."
NGINX_CONFIG="
#
# Vigrid HTTPS access for Slave %%SLAVE_HOST%% (%%SLAVE_FQDN%%), %%SLAVE_IP%%:%%SLAVE_PORT%%
#
server {
  listen 127.0.0.1:443 ssl;
  server_name %%SLAVE_HOST%% %%SLAVE_FQDN%%;

  # Take fullchain here, not cert.pem
  ssl_certificate      /etc/nginx/ssl/localhost.crt;
  ssl_certificate_key  /etc/nginx/ssl/localhost.key;

  ssl_session_cache    builtin:1000 shared:SSL:1m;
  ssl_session_timeout  5m;

  ssl_protocols   TLSv1.2 TLSv1.3;
  ssl_ciphers  HIGH:!aNULL:!MD5;
  ssl_prefer_server_ciphers  on;

  # hide version
  server_tokens        off;

  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;

  # Vigrid API, load only
  location ~ ^/vigrid-api/.*\$
  {
    auth_request     /auth;
    auth_request_set \$auth_status \$upstream_status;
    auth_request_set \$auth_header \$upstream_http_authorization;

    try_files \$uri /vigrid-api/vigrid-api.html?order=\$is_args\$args;
    fastcgi_split_path_info       ^/(.+\/vigrid-api)(/.+)\$;
    fastcgi_pass                  unix:/run/php/php$PHP_VER-fpm.sock;
    # Minimum output buffering
    fastcgi_buffers               2 4k;
    fastcgi_busy_buffers_size     4k;
    fastcgi_buffering             off;
    # fastcgi_buffer_size           8k; 
    include                       /etc/nginx/fastcgi_params;
    fastcgi_read_timeout          300;
    fastcgi_param PATH_INFO       \$fastcgi_path_info;
    fastcgi_param HTTP_AUTHORIZATION \$http_authorization;
    fastcgi_param SCRIPT_FILENAME \$document_root/vigrid-api/vigrid-api.html?order=\$1;
  }
  
  # GNS Heavy client
  location /v2
  {
    auth_request_set \$auth_status \$upstream_status;
    auth_request_set \$auth_header \$upstream_http_authorization;

    proxy_set_header Host \$host;

    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection 'Upgrade';

    access_by_lua_block
    {
      if ngx.var.http_authorization ~= nil and ngx.var.http_authorization:sub(0, 6) == 'Basic ' then

        -- Extract Basic auth
        auth_creds=string.gsub(ngx.var.http_authorization,'^Basic ','',1)
        local vigrid_creds = ngx.decode_base64(auth_creds)

        -- Splitting credentials
        local vigrid_user=string.gsub(vigrid_creds,':.*\$','',1)
        local vigrid_pass=string.gsub(vigrid_creds,'^.*:','',1)
        if vigrid_user == '' or vigrid_pass == '' then
          ngx.log(ngx.ERR, 'Unknown Vigrid credentials (', vigrid_creds, ') not granted to pass')
          ngx.exit(401)
          return
        end

        -- Check user is granted to pass
        local grep_str=string.format(\"egrep '^%s:{PLAIN}%s\$' /home/gns3/etc/vigrid-passwd\",vigrid_user,vigrid_pass)
        local p = io.popen(grep_str)
        local vigrid_check = p:read('*l')
        p:close()
        
        if vigrid_check == nil then
          ngx.log(ngx.ERR, 'Unknown Vigrid credentials (', vigrid_creds, ') not granted to pass')
          ngx.exit(401)
          return
        end

        -- Yes ? Extract user/pass from gns3_server.conf
        local p = io.popen(\"egrep '^(user|password)\\\\\\s*=' /home/gns3/.config/GNS3/gns3_server.conf\")
        local res_user = p:read('*l')
        local res_pass = p:read('*l')
        p:close()
        gns_user=string.gsub(res_user,'^user[ ]+=[ ]+','',1)
        gns_pass=string.gsub(res_pass,'^password[ ]+=[ ]+','',1)

        -- Build base64 header
        local basic = string.format('%s:%s',gns_user,gns_pass)
        local basicb64 = ngx.encode_base64(basic,false)

        -- Replace authorization
        authorization = string.format('Basic %s',basicb64)
        ngx.req.set_header('Authorization', authorization)

        return
      end
    }

    proxy_pass http://127.0.0.1:3080;
  }
  
  location = /auth
  {
    internal;
    
    proxy_pass             http://localhost:8001;
    proxy_pass_request_body off;
    
    proxy_set_header        Content-Length \"\";
    proxy_set_header        X-Original-URI \$request_uri;
    proxy_set_header        X-Original-Host \$host;
    proxy_set_header        X-Real-IP \$remote_addr;
    proxy_set_header        X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Host \$server_name;  
  }
}
"

for i in $VIGRID_GNS_SLAVE_HOSTS
do
  SLAVE_HOST=`echo $i|awk 'BEGIN {FS=":";} { print $1;}'`
  SLAVE_IP=`echo $i|awk 'BEGIN {FS=":";} { print $2;}'`
  SLAVE_PORT=`echo $i|awk 'BEGIN {FS=":";} { print $3;}'`
  SLAVE_FQDN=`cat $VIGRID_TRANSLATION_TABLE 2>/dev/null | egrep "^$SLAVE_IP:$SLAVE_PORT="| awk -F '=' '{print $NF;}'`

  NGINX_SLAVE_CONFIG="/etc/nginx/sites/CyberRange-$SLAVE_HOST-443.conf"

  if [ ! -f $NGINX_SLAVE_CONFIG ]
  then
    echo "  $NGINX_SLAVE_CONFIG does not exist for %%SLAVE_HOST%% (%%SLAVE_FQDN%%), %%SLAVE_IP%%:%%SLAVE_PORT%%, creating it"

    echo "$NGINX_CONFIG" | sed "s/%%SLAVE_HOST%%/$SLAVE_HOST/" | sed "s/%%SLAVE_IP%%/$SLAVE_IP/" \
     | sed "s/%%SLAVE_PORT%%/$SLAVE_PORT/" | sed "s/%%SLAVE_FQDN%%/$SLAVE_FQDN/" >$NGINX_SLAVE_CONFIG
  fi
done

echo -n "  Restarting OpenResty..."
service openresty restart
if [ $? -ne 0 ]
then
  echo "    Apparently NGinx has some issues and cant restart, please check and correct. Once done, press [RETURN]"
  read CR
fi

echo "Adding slave SSH access"
/home/gns3/vigrid/bin/vigrid-sshcheck -a -s /home/gns3/etc/id_GNS3 -u gns3 -h $SLAVE_IP

echo "Vigrid NAS actions:"
VIGRID_NAS_HOST=`echo $VIGRID_NAS_SERVER| awk 'BEGIN { FS=":"; } { print $1;}'`
VIGRID_NAS_IP=`echo $VIGRID_NAS_SERVER| awk 'BEGIN { FS=":"; } { print $2;}'`

echo "  Adding $SLAVE_HOST ($SLAVE_IP) host to /etc/hosts..."
echo "$SLAVE_IP $SLAVE_HOST $SLAVE_HOST.GNS3" | ssh -i $VIGRID_SSHKEY_NAS $VIGRID_SSHKEY_OPTIONS root@$VIGRID_NAS_IP 'cat >>/etc/hosts'

echo "Creating datasets for slave..."
if [ "x$VIGRID_STORAGE_MODE" = "xZFS" ]
then
  ZFS_ROOT=`echo $VIGRID_STORAGE_ROOT|sed 's/^\///'`
  ssh -i $VIGRID_SSHKEY_NAS $VIGRID_SSHKEY_OPTIONS root@$VIGRID_NAS_IP "zfs create -p $ZFS_ROOT/NFS/$SLAVE_HOST/GNS3mount/GNS3/projects"
  ssh -i $VIGRID_SSHKEY_NAS $VIGRID_SSHKEY_OPTIONS root@$VIGRID_NAS_IP "zfs create -p $ZFS_ROOT/NFS/$SLAVE_HOST/var-lib-docker"

fi

if [ "x$VIGRID_STORAGE_MODE" = "xBTRfs" ]
then
  ssh -i $VIGRID_SSHKEY_NAS $VIGRID_SSHKEY_OPTIONS root@$VIGRID_NAS_IP "btrfs sub create /$VIGRID_STORAGE_ROOT/NFS/$SLAVE_HOST/GNS3mount"
  ssh -i $VIGRID_SSHKEY_NAS $VIGRID_SSHKEY_OPTIONS root@$VIGRID_NAS_IP "btrfs sub create /$VIGRID_STORAGE_ROOT/NFS/$SLAVE_HOST/GNS3mount/GNS3"
  ssh -i $VIGRID_SSHKEY_NAS $VIGRID_SSHKEY_OPTIONS root@$VIGRID_NAS_IP "btrfs sub create /$VIGRID_STORAGE_ROOT/NFS/$SLAVE_HOST/GNS3mount/GNS3/projects"
  ssh -i $VIGRID_SSHKEY_NAS $VIGRID_SSHKEY_OPTIONS root@$VIGRID_NAS_IP "btrfs sub create /$VIGRID_STORAGE_ROOT/NFS/$SLAVE_HOST/var-lib-docker"
fi

echo "  Adding Vigrid shares to /etc/exports..."
echo "
/Vstorage/NFS/$SLAVE_HOST/GNS3mount                $SLAVE_HOST.GNS3(rw,no_root_squash,no_subtree_check)
/Vstorage/NFS/$SLAVE_HOST/GNS3mount/GNS3           $SLAVE_HOST.GNS3(rw,no_root_squash,no_subtree_check)
/Vstorage/NFS/$SLAVE_HOST/GNS3mount/GNS3/projects  $SLAVE_HOST.GNS3(rw,no_root_squash,no_subtree_check)
/Vstorage/NFS/$SLAVE_HOST/var-lib-docker           $SLAVE_HOST.GNS3(rw,no_root_squash,no_subtree_check)
" | ssh -i $VIGRID_SSHKEY_NAS $VIGRID_SSHKEY_OPTIONS root@$VIGRID_NAS_IP 'cat >>/etc/exports'

echo "  Now reloading NFS exports.. Sometimes this operation might fail because of discrepencies between datasets & exports".
echo "  Press [RETURN] when you are ready to launch the action"
read ANS
ssh -i $VIGRID_SSHKEY_NAS $VIGRID_SSHKEY_OPTIONS root@$VIGRID_NAS_IP 'exportfs -a'

echo -n "New "
showmount -e $VIGRID_NAS_IP

echo "Finally updating vigrid.conf..."

T=`date +'+%Y-%m-%d_%H:%M:%S'`
echo "  Sanity saving it to vigrid.conf.$T"
cp $VIGRID_CONF $VIGRID_CONF.$T

echo "  Updating file..."
cat $VIGRID_CONF | grep -v "^VIGRID_GNS_SLAVE_HOSTS" >/tmp/temp$T

if [ "x$VIGRID_GNS_SLAVE_HOSTS" != "x" ]
then
  VIGRID_GNS_SLAVE_HOSTS="$VIGRID_GNS_SLAVE_HOSTS $SLAVE_HOST:$SLAVE_IP:$SLAVE_PORT"
else
  VIGRID_GNS_SLAVE_HOSTS="$SLAVE_HOST:$SLAVE_IP:$SLAVE_PORT"
fi
echo "VIGRID_GNS_SLAVE_HOSTS=\"$VIGRID_GNS_SLAVE_HOSTS\"" >>/tmp/temp$T

mv /tmp/temp$T $VIGRID_CONF
[ $? -ne 0 ] && echo "Replacement of $VIGRID_CONF failed, no Slave added"
