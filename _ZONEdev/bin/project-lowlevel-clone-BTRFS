#!/usr/bin/php
<?php
#################################################################################################################################
##
## This material is part of VIGRID extensions to GNS3 for Trainings & CyberRange designs
##
## (c) Laurent LEVIER for script, designs and technical actions, https://github.com/llevier/
## LICENCE: Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA)
##
## Each dependancies (c) to their respective owners
##
##################################################################################################################################
// hide notices
ini_set('error_reporting', E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED);
error_reporting(E_ERROR | E_PARSE);

// Genesis home directory
$gns_home="/home/gns3";
$gns_home_projects="/home/gns3/GNS3/projects";

// Genesis functions
include "/home/gns3/vigrid/www/site/manager/gns3_functions.php";

// turn off output buffering
ob_implicit_flush();

$SSHauth="ssh -i /home/gns3/.ssh/id_$host -o StrictHostKeyChecking=no";
$SSHdo=$SSHauth." gns3";

$NAS_SSH="ssh -i /root/.ssh/id_Gargantua Gargantua1";
$NAS_GNS3_DIR="/mnt2/Bstorage/Bstorage_GNS3farm/GNS3";
$NAS_GNS_PROJECTS_DIR="/mnt2/Bstorage/Bstorage_GNS3farm/GNS3/projects";

$opt=getopt("cs:S:T:r:");
// if ($opt['c']==false) { $correct_mode=1; }

$from_project_uuid=$opt['s'];
$from_project_name=$opt['S'];
$to_project_name=$opt['T'];

$report_file=$opt['r'];

### Verbose level
$verbose=2;

if (($from_project_uuid=="") || (!preg_match("/\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b$/",$from_project_uuid))
 || ($from_project_name=="") || ($to_project_name==""))
{
  print("$argv[0] arguments:
    [ -c correction_mode ]
    -s source_project_uuid
    -S source_project_name
    -T target_project_name
    [ -r report_file ]\n");

  exit(1);
}

if ($correct_mode)
{
  MODEcorrect();
  
  exit;
}

print("Source project UUID: $from_project_uuid ($from_project_name) to clone as $to_project_name\n");

// get controller configuration to extract Genesis hosts...
// $gns_controller=gns_getcontrollers();
// report("Opening 2b686034-dd81-49d7-a0d3-c9e4cadbec51\n");
// gns_project_command($gns_controller,"172.16.100.45","2b686034-dd81-49d7-a0d3-c9e4cadbec51","open");

// exit;
// if ($report_file) { unlink($report_file); }

report("BTRfs cloning project $from_project_uuid");

// 1- check /home/gns3/GNS3/projects is a BTRfs volume, generate a target project UUID, check it is not taken already
// 2- source: extract all unique uuids
// 3- generate new uuid pairs for nodes
// 4- target: all unique consoles
// 4b- generate new console ports
// 5- target: extract all unique MAC
// 5b- generate new macaddr pairs
// 6- rsync avec new project id_$host
// 7- update project file of uuid + rename directories uuid + consoles + MAC addresses
// 7b- rename node directories with new uuids
// 7c- chmod + chown target project dir
// 8- SIGHUP to gns3-server
report("\n\n");

// 1- check /home/gns3/GNS3/projects is a BTRfs volume, generate a target project UUID, check it is not taken already

report("Phase 1: ensuring $gns_home_projects is a BTRfs volume...\n");

// 2- source: extract all unique uuids
report("Phase 2: generating a target project free UUID...\n");
$to_project_uuid_pairs=array();

while (1)
{
  $to_project_uuid=gen_uuid();
  
  if (!is_dir("$gns_home_projects/$to_project_uuid")) { break; }

  report("  $to_project_uuid already existing, let's try again..\n");
  sleep (1);
}
report("  Target project $to_project_name UUID will be $to_project_uuid\n");
array_push($to_project_uuid_pairs,"$from_project_uuid:$to_project_uuid");

report("Phase 3: extract all UUIDs from GNS3 host...\n");

$command="cat ".$gns_home_projects."/*/*.gns3";
$res=get_exec($command,"",false);

$all_project_uuid=preg_grep("/\"\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b\"/",$res);
usort($all_project_uuid, 'compare_name');
report("      I found ".sizeof($all_project_uuid)." unique UUIDs on target host\n");

for ($u=0;$u<sizeof($all_project_uuid);$u++)
{
  $all_project_uuid[$u]=preg_replace("/^.* \"/","",$all_project_uuid[$u]);
  $all_project_uuid[$u]=preg_replace("/\".*$/","",$all_project_uuid[$u]);
  $all_project_uuid[$u]=rtrim($all_project_uuid[$u]);
}
$uuid_all=$all_project_uuid;

report("  3b: extract all UUIDs from source project configuration files...\n");
$command="cat ".$gns_home_projects."/".$from_project_uuid."/*.gns3";
$res=get_exec($command,"",false);

$from_project_uuid_list=preg_grep("/\"\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b\"/",$res);
usort($from_project_uuid_list, 'compare_name');
report("      I found ".sizeof($from_project_uuid_list)." unique UUIDs on project\n");

for ($u=0;$u<sizeof($from_project_uuid_list);$u++)
{
  $from_project_uuid_list[$u]=preg_replace("/^.* \"/","",$from_project_uuid_list[$u]);
  $from_project_uuid_list[$u]=preg_replace("/\".*$/","",$from_project_uuid_list[$u]);
  $from_project_uuid_list[$u]=rtrim($from_project_uuid_list[$u]);
}

// 3- generate new uuid pairs for objects
for ($i=0;$i<sizeof($from_project_uuid_list);$i++)
{
  $t=preg_replace("/^.*$from_project_uuid/","",$from_project_uuid_list[$i]);
  $t=str_replace(PHP_EOL,"",$t);

  if (preg_match("/\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b$/",$t))
  {
    $t_arr=preg_split("/\//",$t);
    $t_uuid=$t_arr[sizeof($t_arr)-1];

    while (preg_grep("/$t_uuid_new/",$uuid_all)) { $t_uuid_new=gen_uuid(); }
    if ($verbose>=1) { report("  Detected $t_uuid, new will be $t_uuid_new\n"); }
    array_push($to_project_uuid_pairs,"$t_uuid:$t_uuid_new");
    array_push($uuid_all,$t_uuid_new);

  }
}

// 4- target: all unique consoles
report("Phase 4: managing console ports\n");

$command="cat ".$gns_home."/.config/GNS3/gns3_server.conf";
$res=get_exec($command,"",false);
for ($i=0;$i<sizeof($res);$i++)
{ $res[$i]=ltrim(rtrim($res[$i])); }

$line=preg_grep("/^console_start_port_range.*=/",$res);
$console_port_start=ltrim(rtrim(preg_replace("/^.*=/","",reset($line))));
$line=preg_grep("/^console_end_port_range.*=/",$res);
$console_port_end=ltrim(rtrim(preg_replace("/^.*=/","",reset($line))));
report("  Console & telnet ports range on target host is from $console_port_start to $console_port_end.\n");

$command="cat ".$gns_home_projects."/*/*.gns3";
$res=get_exec($command,"",false);
for ($i=0;$i<sizeof($res);$i++)
{ $res[$i]=ltrim(rtrim($res[$i])); }

$consoles_all=preg_grep("/\"console\": /",$res);
$consoles_total=sizeof($consoles_all);
usort($consoles_all, 'compare_name');
report("    I found $consoles_total console ports on target host...\n");

for ($u=0;$u<sizeof($consoles_all);$u++)
{
  $consoles_all[$u]=preg_replace("/^.*: /","",$consoles_all[$u]);
  $consoles_all[$u]=preg_replace("/,.*$/","",$consoles_all[$u]);
  $consoles_all[$u]=ltrim(rtrim($consoles_all[$u]));
}

$command="cat $gns_home_projects/$from_project_uuid/*.gns3";
$res=get_exec($command,"",false);
$consoles_project=preg_grep("/\"console\": /",$res);
$console_needs=sizeof($consoles_project);
report("    Project needs $console_needs unique console ports...\n");
usort($consoles_project, 'compare_name');

// 4b- generate new console ports
report("    Generating new unique console ports pairs\n");
for ($i=0;$i<$console_needs;$i++)
{
  $consoles_project[$i]=preg_replace("/^.*\"console\": /","",$consoles_project[$i]);
  $consoles_project[$i]=preg_replace("/,.*$/","",$consoles_project[$i]);
  $consoles_project[$i]=ltrim(rtrim($consoles_project[$i]));

  if ($verbose>=3) { report("    consoles_all=".implode(",",$consoles_all)."\n"); }

  $new=".*";
  if ($consoles_project[$i]>0)
  {
    while(preg_grep("/^$new$/",$consoles_all))
    { $new=rand($console_port_start,$console_port_end); }

    array_push($consoles_all,$new);
    $consoles_project[$i].=":".$new;

    if ($verbose>=1) { report("      Console ".preg_replace("/:/"," -> ",$consoles_project[$i])."\n"); }
  }
}
// 5- target: extract all unique MAC
report("Phase 5: managing MAC addresses\n");
report("  Extracting unique MAC addresses on target host\n");
$command="cat ".$gns_home_projects."/*/*.gns3";
$res=get_exec($command,"",false);

$all_project_mac=preg_grep("/\"mac_address\": /",$res);
usort($all_project_mac, 'compare_name');
report("    I found ".sizeof($all_project_mac)." unique MACs on target host\n");

for ($u=0;$u<sizeof($all_project_mac);$u++)
{
  $all_project_mac[$u]=preg_replace("/^.* \"/","",$all_project_mac[$u]);
  $all_project_mac[$u]=preg_replace("/\".*$/","",$all_project_mac[$u]);
  $all_project_mac[$u]=rtrim($all_project_mac[$u]);
}

$mac_all=$all_project_mac;

report("  Extracting unique MAC addresses on project\n");
$command="cat $gns_home_projects/$from_project_uuid/*.gns3";
$res=get_exec($command,"",false);

$from_project_uuid_mac=preg_grep("/\"mac_address\": /",$res);
usort($from_project_uuid_mac, 'compare_name');
report("    I found ".sizeof($from_project_uuid_mac)." unique MACs on project\n");

for ($u=0;$u<sizeof($from_project_uuid_mac);$u++)
{
  $from_project_uuid_mac[$u]=preg_replace("/^.* \"/","",$from_project_uuid_mac[$u]);
  $from_project_uuid_mac[$u]=preg_replace("/\".*$/","",$from_project_uuid_mac[$u]);
  $from_project_uuid_mac[$u]=rtrim($from_project_uuid_mac[$u]);
}

$from_project_uuid_mac_new=array();

for ($u=0;$u<sizeof($from_project_uuid_mac);$u++)
{
  while (preg_grep("/$mac_new/",$mac_all)) { $mac_new=gen_mac(); }
  array_push($from_project_uuid_mac_new,$mac_new);
  array_push($mac_all,$mac_new);
}

// 5b- generate new macaddr pairs
report("  Generating new unique UUIDs pairs\n");
for ($u=0;$u<sizeof($from_project_uuid_mac);$u++)
{ 
  $to_project_uuid_mac_pairs[$u]=$from_project_uuid_mac[$u]."-".$from_project_uuid_mac_new[$u];
  if ($verbose>=1) { report("      #".$u.": ".preg_replace("/-/"," -> ",$to_project_uuid_mac_pairs[$u]."\n")); }
}

report("Phase 6: data transfer...\n");

// 6b- rsync avec new project id_$host
report("  Cloning (BRTfs snapshot) project data directory...\n");
$command="$NAS_SSH $NAS_GNS3_DIR/bin/btrfs-recursive \"$NAS_GNS_PROJECTS_DIR/$from_project_uuid\" \"$NAS_GNS_PROJECTS_DIR/$to_project_uuid\" >/dev/null 2>/dev/null";
// print("C=$command\n");
$res=get_exec($command,"    ",true);

// Sanity wait for BTRfs...
report("Sleeping 60secs (NFS acdir+acregmax=50s)...");
sleep (60);

$res=get_exec("ls -l $gns_home_projects >/dev/null 2>/dev/null" ,"    ",true);
find_all_files(0,"$gns_home_projects",$res);

while(1)
{
  $fd=fopen("$gns_home_projects/$to_project_uuid/$from_project_name.gns3","r");
  if (!$fd)
  {
    report("    $gns_home_projects/$to_project_uuid/$from_project_name.gns3 not yet present, sleeping 5s\n");
    sleep (5);
  }
  else { fclose($fd); break; }
}

// 7- update project file of uuid + rename directories uuid + consoles + MAC addresses
report("Phase 7: finalizing target...\n");
report("  Updating target project file to change UUIDs, MAC addresses & console ports...\n");

report("    Renaming target project file to new name: $to_project_name.\n");
$config_file="$gns_home_projects/$to_project_uuid/$to_project_name.gns3";
// $command="mv '$gns_home_projects/$to_project_uuid/$from_project_name.gns3' '$config_file'";
// print("      C=$command\n");
// $res=get_exec($command,"",true);
$rc=rename("$gns_home_projects/$to_project_uuid/$from_project_name.gns3",$config_file);

$fd=fopen($config_file,"r");
if (!$fd) { report("Cant open $config_file !!, stopping\n"); exit(1); }

$config=array();
while (($line = fgets($fd, 4096)) !== false)
{ array_push($config,$line); }
fclose($fd);

for ($i=0;$i<sizeof($config);$i++)
{
  if ($verbose==2)
  { report("Config: $config[$i]"); }

  if (strpos($config[$i],"\"$from_project_name\""))
  // if (preg_match("/\"$from_project_uuid\"/i",$config[$i]))
  {
    // if ($verbose==2)
    // { print("Detected project name: $from_project_name\n"); }
  
    // $config[$i]=preg_replace("/\"$from_project_uuid\"/","\"".$to_project_uuid."\"",$config[$i]);
    $count=1;
    $config[$i]=str_replace("\"$from_project_name\"","\"$to_project_name\"",$config[$i],$count);
    
    if ($verbose==2)
    { report("   New: $config[$i]"); }
  }
  else if (preg_match("/\"\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b\"/",$config[$i])) // uuid
  {
    $uuid_type=preg_replace("/\": .*$/","",$config[$i]);
    $uuid_type=preg_replace("/^.*\"/","",$uuid_type);
    $uuid_type=ltrim(rtrim($uuid_type));
    
    $pattern="/^.*\"".$uuid_type."\": /";
    $uuid_value=preg_replace("/^.*\"".$uuid_type."\": /","",$config[$i]);
    $uuid_value=preg_replace("/[\",]/","",$uuid_value);
    $uuid_value=ltrim(rtrim($uuid_value));

    // if ($verbose==2)
    // { report("Found UUID type $uuid_type, value=$uuid_value\n"); }
  
    // if (preg_match("/template_id/i",$uuid_type))
    // {
      // print("\n  *** WARNING !!! Template ID $uuid_value might need to exist on target host $to_host ***\n");
    // }
    if (preg_match("/project_id/i",$uuid_type))
    {
      $config[$i]=preg_replace("/$from_project_uuid/",$to_project_uuid,$config[$i]);
    }
    else
    {
      // if ($verbose==2)
      // { report("  Replacing $uuid_type($uuid_value)\n"); }
      if (!($line=preg_grep("/^$uuid_value:/",$to_project_uuid_pairs)))
      {
        report("ERROR in $config_file : cant find $uuid_value\n");
        sleep (5);
      }
      else
      {
        $uuid_new=preg_replace("/^.*:/","",reset($line));
        $config[$i]=preg_replace("/$uuid_value/",$uuid_new,$config[$i]);
      }
    }
    if ($verbose==2)
    { report("   New: $config[$i]"); }
  }
  else if (preg_match("/\"mac_address\": /",$config[$i])) // MAC
  {
    $mac_value=preg_replace("/^.*\"mac_address\": \"/","",$config[$i]);
    $mac_value=preg_replace("/\".*$/","",$mac_value);
    $mac_value=ltrim(rtrim($mac_value));

    // if ($verbose==2)
    // { report("MAC: $mac_value"); }

    if (!($line=preg_grep("/^$mac_value-/",$to_project_uuid_mac_pairs)))
    {
      report("ERROR in $config_file: cant find $mac_value\n");
      sleep (5);
    }
    else
    {
      $mac_new=preg_replace("/^.*-/","",reset($line));
      $config[$i]=preg_replace("/$mac_value/",$mac_new,$config[$i]);
    }

    if ($verbose==2)
    { report("   New: $config[$i]"); }
  }
  else if (preg_match("/^.*\"console\": /",$config[$i])) // console
  {
    $console_value=preg_replace("/^.*\"console\": /","",$config[$i]);
    $console_value=preg_replace("/[\",]/","",$console_value);
    $console_value=ltrim(rtrim($console_value));

    // if ($verbose==2)
    // { report("Console port = -$console_value-"); }

    if ($console_value>0)
    {
      if (!($line=preg_grep("/^$console_value:/",$consoles_project)))
      {
        report("ERROR in $config_file : cant find $console_value\n");
        sleep (5);
      }
      else
      {
        $console_new=preg_replace("/^.*:/","",reset($line));
        $console_new=preg_replace("/[\",]/","",$console_new);
        $config[$i]=preg_replace("/: $console_value/",": $console_new",$config[$i]);
      }
    }

    if ($verbose==2)
    { report("   New: $config[$i]"); }
  }
}
$tmpfile=tempnam("/tmp", "project_$to_project_uuid");
report("    Writing new configuration file ($tmpfile)...\n");

$fd=fopen($tmpfile,"w");
if (!$fd) { report("Cant create $tmpfile !!, stopping, recalling a copy has been created on $to_host !!\n"); exit(1); }
for ($i=0;$i<sizeof($config);$i++)
{ fwrite($fd,$config[$i]); }
fclose($fd);

report("    Replacing target project configuration file with $tmpfile...\n");
// $command="mv $tmpfile '$config_file'";
// $res=get_exec($command,"",false);
$rc=rename($tmpfile,$config_file);
unlink($tmpfile);
report("\n");

// 7b- rename node directories with new uuids
report("    Renaming target nodes directories with new UUIDs...");
// find is failing with NAS using BTRfs subvolumes (loop detected)
// $command="find $gns_home_projects/$to_project_uuid -type d 2>/dev/null";
// $dirs=get_exec($command,"",false);
find_all_files(1,"$gns_home_projects/$to_project_uuid",$dirs);
$dirs_uuid=preg_grep("/\/\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b$/",$dirs);
usort($dirs_uuid, 'compare_name');

if ($verbose>=1) { report("\n"); }
for ($d=0;$d<sizeof($dirs_uuid);$d++)
{
  if (preg_match("/\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b$/",$dirs_uuid[$d]))
  {
    for ($u=0;$u<sizeof($to_project_uuid_pairs);$u++)
    {
      $t=preg_split("/:/",$to_project_uuid_pairs[$u]);
      $uuid_source=$t[0];
      $uuid_target=$t[1];
      
      if (preg_match("/\/$uuid_source$/",$dirs_uuid[$d]))
      {
        $dir_source=rtrim($dirs_uuid[$d]);
        $dir_target=rtrim(preg_replace("/$uuid_source/",$uuid_target,$dir_source));
        
        // $command="mv $dir_source $dir_target";

        if ($verbose>=1)
        { report("      Moving $dir_source\n          To $dir_target..."); }
        $rc=rename($dir_source,$dir_target);
        // system($command,$rc);
        if ($rc==true)
        { if ($verbose) { report("done...\n"); } }
        else
        { if ($verbose) { report("move from $dir_source to $dir_target failed (rc=$rc)...\n"); } }

        break;
      }
    }
  }
}
report("\n");

// 7c- chmod + chown target project dir
report("    Changing target directory ownership to gns3:gns3...");
find_all_files(0,"$gns_home_projects/$to_project_uuid",$files);
for ($i=0;$i<sizeof($files);$i++)
{
  if (!chown($files[$i],"gns3")) { report("      chown FAIL: $files[$i]\n"); }
  if (!chgrp($files[$i],"gns3")) { report("      chgrp FAIL: $files[$i]\n"); }
  
  $command="chmod ug+rw $files[$i]";
  system($command,$rc);
  if (!$rc)  { report("      chmod FAIL: $files[$i]\n"); }
}
report("\n");

// 8- SIGHUP to gns3-server
report("  Sending SIGHUP to target GNS3 server (until API is updated)...");
$command="ps axo pid,command|grep \"gns3-server\"|grep -v grep 2>/dev/null";
$res=get_exec($command,"",false);
$line=ltrim($res[0]);
$pid=preg_split("/[\s ]+/",$line);
if ($pid[0]>0)
{
  if (posix_kill($pid[0],SIGHUP)) // Sending SIHGUP to server for reloading...
  { report("sent to $pid[0]\n"); }
  else
  { report("cant send to $pid[0]\n"); }
}
else
{ report("Cant get PID of gns3-server to send it a SIGHUP..."); }

report("Finally opening target project...");

// gns_project_command($gns_controller,$to_host,$to_project_uuid,"open");
report("done\n");

$from_project_uuid=$opt['s'];
$from_project_name=$opt['S'];
$to_project_name=$opt['T'];

report("Cloning $from_project_name ($from_project_uuid) as $to_project_name -> ### SUCCESS ###\n");

// print("Erasing $to_project_uuid_dir...\n");
// $res=get_exec("rm -rf $to_project_uuid_dir","",true);

exit(0);

function get_exec($command,$prefix,$display)
{
  $res=array();

  $fd=popen("$command 2>/dev/null","r");
  while (!feof($fd))
  {
    $line=fgets($fd,4096);
    array_push($res,$line);
    if ($display) { report($prefix.$line); ob_implicit_flush(); }
  }
  fclose($fd);
  
  return($res);
}

function gen_uuid() {
  return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
    // 32 bits for "time_low"
    random_int( 0, 0xffff ), random_int( 0, 0xffff ),
    // 16 bits for "time_mid"
    random_int( 0, 0xffff ),
    // 16 bits for "time_hi_and_version",
    // four most significant bits holds version number 4
    random_int( 0, 0x0fff ) | 0x4000,
    // 16 bits, 8 bits for "clk_seq_hi_res",
    // 8 bits for "clk_seq_low",
    // two most significant bits holds zero and one for variant DCE1.1
    random_int( 0, 0x3fff ) | 0x8000,
    // 48 bits for "node"
    random_int( 0, 0xffff ), random_int( 0, 0xffff ), random_int( 0, 0xffff )
  );
}

function gen_mac()
{
  $mac=str_split(md5(random_int(0,0xffffff)),2);
   
  return sprintf( '0c:%s:%s:%s:%s:00',$mac[0],$mac[1],$mac[2],$mac[3]);

  // return sprintf( '%02x:%02x:%02x:%02x:%02x:%02x',
    // random_int( 0, 0x10 ),
    // random_int( 0, 0xff ),
    // random_int( 0, 0xff ),
    // random_int( 0, 0xff ),
    // random_int( 0, 0xff ),
    // random_int( 0, 0x10 )
  // );
}

function clean_array($var)
{
  return ($var !== NULL && $var !== FALSE && $var !== "");
}

function report($text)
{
  global $report_file;
  
  if ($report_file!="")
  {
    $fd=fopen($report_file,"a");
    if (!$fd) { print("Cant append $report_file !!, stopping\n"); }

    fwrite($fd,$text);

    fclose($fd);
  }
  else { print $text; }
}

function find_all_files($mode,$dir, &$results = array())
{
  $files = scandir($dir);

  foreach ($files as $key => $value)
  {
    $path = realpath($dir . DIRECTORY_SEPARATOR . $value);
    if (!is_dir($path))
    {
      // mode=0 -> all, mode=1 -> only dirs
      if ($mode==0) { $results[] = $path; }
    }
    else if ($value != "." && $value != "..")
    {
      find_all_files($mode,$path, $results);
      $results[] = $path;
    }
  }
  return $results;
}

function  MODEcorrect()
{
  global $gns_home_projects;
  global $verbose;
  
  global $from_project_uuid;
  global $from_project_name;
  global $to_project_name;
  
  print("### Check & Repair mode requested\n");

  print("Cloning request was from source project UUID: $from_project_uuid ($from_project_name) to clone as $to_project_name\n");

  $source_config_file="$gns_home_projects/$from_project_uuid/$from_project_name.gns3";

  report("Loading source config file: $source_config_file...");
  $fd=fopen($source_config_file,"r");
  if (!$fd) { report("Cant open $source_config_file !!, stopping\n"); exit(1); }
  $source_config=array();
  while (($line = fgets($fd, 4096)) !== false)
  { array_push($source_config,$line); }
  fclose($fd);
  report("loaded.\n");

  report("Searching and loading target config file...\n");
  $res=get_exec("ls -1 $gns_home_projects/*/$to_project_name.gns3","",false);
  $target_config_file=ltrim(rtrim($res[0]));

  report("  Loading supposed target config file: $target_config_file...");
  $fd=fopen($target_config_file,"r");
  if (!$fd) { report("Cant open $target_config_file !!, stopping\n"); exit(1); }
  $target_config=array();
  while (($line = fgets($fd, 4096)) !== false)
  { array_push($target_config,$line); }
  fclose($fd);
  report("loaded.\n");
  
  $t=preg_split("/\//",$target_config_file);
  $to_project_uuid=$t[(sizeof($t)-2)];

  report("Side by side lines comparison...\n");
  // if (sizeof($source_config) != sizeof($target_config))
  // { report("  Config sizes differs (source=".sizeof($source_config)."), target=".sizeof($target_config)."), exiting\n"); exit; }

  $uuid_pairs=array();
  for ($l=0;$l<sizeof($source_config);$l++)
  {
    if (preg_match("/\"node_id\".*\"\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b\"/",$source_config[$l]))
    {
      if ($verbose>=2) { report("  Detected Node UUID:\n    ".ltrim($source_config[$l])."    ".ltrim($target_config[$l])); }
      $source_uuid=preg_replace("/^.*\": /","",ltrim(rtrim($source_config[$l])));
      $source_uuid=preg_replace("/[\",]/","",$source_uuid);
      if ($verbose>=2) { report("      Source UUID=$source_uuid\n"); }

      $target_uuid=preg_replace("/^.*\": /","",ltrim(rtrim($target_config[$l])));
      $target_uuid=preg_replace("/[\",]/","",$target_uuid);
      if ($verbose>=2) { report("      Target UUID=$target_uuid\n"); }

      $res=get_exec("ls -1d $gns_home_projects/$from_project_uuid/project-files/*/$source_uuid","",false);
      $source_node_dir=ltrim(rtrim($res[0]));
      if ($verbose>=2) { report("      Source node directory=$source_node_dir\n"); }
      
      $res=get_exec("ls -1d $gns_home_projects/$to_project_uuid/project-files/*/$target_uuid","",false);
      $target_node_dir=ltrim(rtrim($res[0]));
      if ($verbose>=2) { report("      Target node directory=$target_node_dir\n"); }

      if (($source_node_dir=="") || ($target_node_dir==""))
      {
        report("### ERROR DETECTED, cant find Node directory for node id=$target_uuid ###\n");
      }
    }
  }

}

?>
