#
# Vigrid HTTPS access (Master): Vigrid + consoles + GNS3 Heavy client + WebUI
#

################################################################################################################################
#
# This material is part of VIGRID extensions to GNS3 for Trainings & CyberRange designs
#
# (c) Laurent LEVIER for script, designs and technical actions, https://github.com/llevier/
# LICENCE: Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA)
#
# Each dependancies (c) to their respective owners
#
#################################################################################################################################
server {
  listen 127.0.0.1:443 ssl default;
  server_name localhost;

  # LetsEncrypt: echo "/home/gns3/vigrid/www/letsencrypt" | certbot certonly --dry-run --webroot -d hostname.domainname
  #
  # Take fullchain here, not cert.pem
  ssl_certificate      /etc/nginx/ssl/localhost.crt;
  ssl_certificate_key  /etc/nginx/ssl/localhost.key;

  ssl_session_cache    builtin:1000 shared:SSL:1m;
  ssl_session_timeout  5m;

  ssl_protocols              TLSv1.3;
  ssl_ciphers                HIGH:!aNULL:!MD5;
  ssl_prefer_server_ciphers  on;

  # hide version
  server_tokens        off;

  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;

  root   /home/gns3/vigrid/www/site;
  index  index.html index.htm index.php;

  # prevent BoF attacks
  #client_body_buffer_size  1k;
  #client_header_buffer_size 1k;
  #client_max_body_size 8m;
  #large_client_header_buffers 2 1k;

  # limit #clients from same source IP ?
  # in http section:   limit_conn_zone $binary_remote_addr zone=addr:5m;
  # in server section: limit_conn addr value;

  # non-GNS3 Web pages
  # Vigrid home page
  location /
  {
    # sanity
    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { log_not_found off; }

    location ~ \.css  { add_header Content-Type text/css; }
    location ~ \.js   { add_header Content-Type application/x-javascript; }
    location ~ \.eot  { add_header Content-Type application/vnd.ms-fontobject; }
    location ~ \.woff { add_header Content-Type font/woff; }

    location ~* \.(htm|html|php)$
    {
      try_files $uri =404;
      fastcgi_split_path_info       ^(.+\.html)(/.+)$;
      fastcgi_index                 index.html;
      fastcgi_pass                  unix:/run/php/php%%PHP_VER%%-fpm.sock;
      include                       /etc/nginx/fastcgi_params;
      fastcgi_param PATH_INFO       $fastcgi_path_info;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }
  }

  # Vigrid management pages
  location /manager
  {
    # Basic authentication
    auth_basic "Vigrid's access, who are you ?";
    auth_basic_user_file /home/gns3/etc/vigrid-passwd;

    auth_request     /auth;
    auth_request_set $auth_status $upstream_status;

    location ~ \.css  { add_header Content-Type text/css; }
    location ~ \.js   { add_header Content-Type application/x-javascript; }
    location ~ \.eot  { add_header Content-Type application/vnd.ms-fontobject; }
    location ~ \.woff { add_header Content-Type font/woff; }

    location ~* \.(htm|html|php)$
    {
      try_files $uri =404;
      fastcgi_split_path_info       ^(.+\.html)(/.+)$;
      fastcgi_index                 index.html;
      fastcgi_pass                  unix:/run/php/php%%PHP_VER%%-fpm.sock;
      # Minimum output buffering
      fastcgi_buffers               2 4k;
      fastcgi_busy_buffers_size     4k;
      fastcgi_buffering             off;
      # fastcgi_buffer_size           8k; 
      include                       /etc/nginx/fastcgi_params;
      fastcgi_read_timeout          300;
      fastcgi_param PATH_INFO       $fastcgi_path_info;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }
  }

  # Vigrid API, load only
  location ~ ^/vigrid-api/.*$
  {
    auth_request     /auth;
    auth_request_set $auth_status $upstream_status;
    auth_request_set $auth_header $upstream_http_authorization;

    try_files $uri /vigrid-api/vigrid-api.html?order=$is_args$args;
    fastcgi_split_path_info       ^/(.+\/vigrid-api)(/.+)$;
    fastcgi_pass                  unix:/run/php/php%%PHP_VER%%-fpm.sock;
    # Minimum output buffering
    fastcgi_buffers               2 4k;
    fastcgi_busy_buffers_size     4k;
    fastcgi_buffering             off;
    # fastcgi_buffer_size           8k; 
    include                       /etc/nginx/fastcgi_params;
    fastcgi_read_timeout          300;
    fastcgi_param PATH_INFO       $fastcgi_path_info;
    fastcgi_param HTTP_AUTHORIZATION $http_authorization;
    fastcgi_param SCRIPT_FILENAME $document_root/vigrid-api/vigrid-api.html?order=$1;
  }

  location ^~ /static
  {
    auth_request_set $auth_status $upstream_status;
    auth_request_set $auth_header $upstream_http_authorization;

    proxy_set_header Host $host;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'Upgrade';

    access_by_lua_block
    {
      if ngx.var.http_authorization ~= nil and ngx.var.http_authorization:sub(0, 6) == 'Basic ' then

        -- Extract Basic auth
        auth_creds=string.gsub(ngx.var.http_authorization,'^Basic ','',1)
        local vigrid_creds = ngx.decode_base64(auth_creds)

        -- Splitting credentials
        local vigrid_user=string.gsub(vigrid_creds,':.*$','',1)
        local vigrid_pass=string.gsub(vigrid_creds,'^.*:','',1)
        if vigrid_user == '' or vigrid_pass == '' then
          ngx.log(ngx.ERR, 'Unknown Vigrid credentials (', vigrid_creds, ') not granted to pass')
          ngx.exit(401)
          return
        end

        -- Check user is granted to pass
        local grep_str=string.format("egrep '^%s:{PLAIN}%s$' /home/gns3/etc/vigrid-passwd",vigrid_user,vigrid_pass)
        local p = io.popen(grep_str)
        local vigrid_check = p:read('*l')
        p:close()
        
        if vigrid_check == nil then
          ngx.log(ngx.ERR, 'Unknown Vigrid credentials (', vigrid_creds, ') not granted to pass')
          ngx.exit(401)
          return
        end

        -- Yes ? Extract user/pass from gns3_server.conf
        local p = io.popen("egrep '^(user|password)\\s*=' /home/gns3/.config/GNS3/gns3_server.conf")
        local res_user = p:read('*l')
        local res_pass = p:read('*l')
        p:close()
        gns_user=string.gsub(res_user,'^user[ ]+=[ ]+','',1)
        gns_pass=string.gsub(res_pass,'^password[ ]+=[ ]+','',1)

        -- Build base64 header
        local basic = string.format('%s:%s',gns_user,gns_pass)
        local basicb64 = ngx.encode_base64(basic,false)

        -- Replace authorization
        authorization = string.format('Basic %s',basicb64)
        ngx.req.set_header('Authorization', authorization)

        return
      end
    }

    proxy_pass http://127.0.0.1:3080;
  }

  location ^~ /v2
  {
    auth_request_set $auth_status $upstream_status;
    auth_request_set $auth_header $upstream_http_authorization;

    proxy_set_header Host $host;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'Upgrade';

    access_by_lua_block
    {
      if ngx.var.http_authorization ~= nil and ngx.var.http_authorization:sub(0, 6) == 'Basic ' then

        -- Extract Basic auth
        auth_creds=string.gsub(ngx.var.http_authorization,'^Basic ','',1)
        local vigrid_creds = ngx.decode_base64(auth_creds)

        -- Splitting credentials
        local vigrid_user=string.gsub(vigrid_creds,':.*$','',1)
        local vigrid_pass=string.gsub(vigrid_creds,'^.*:','',1)
        if vigrid_user == '' or vigrid_pass == '' then
          ngx.log(ngx.ERR, 'Unknown Vigrid credentials (', vigrid_creds, ') not granted to pass')
          ngx.exit(401)
          return
        end

        -- Check user is granted to pass
        local grep_str=string.format("egrep '^%s:{PLAIN}%s$' /home/gns3/etc/vigrid-passwd",vigrid_user,vigrid_pass)
        local p = io.popen(grep_str)
        local vigrid_check = p:read('*l')
        p:close()
        
        if vigrid_check == nil then
          ngx.log(ngx.ERR, 'Unknown Vigrid credentials (', vigrid_creds, ') not granted to pass')
          ngx.exit(401)
          return
        end

        -- Yes ? Extract user/pass from gns3_server.conf
        local p = io.popen("egrep '^(user|password)\\s*=' /home/gns3/.config/GNS3/gns3_server.conf")
        local res_user = p:read('*l')
        local res_pass = p:read('*l')
        p:close()
        gns_user=string.gsub(res_user,'^user[ ]+=[ ]+','',1)
        gns_pass=string.gsub(res_pass,'^password[ ]+=[ ]+','',1)

        -- Build base64 header
        local basic = string.format('%s:%s',gns_user,gns_pass)
        local basicb64 = ngx.encode_base64(basic,false)

        -- Replace authorization
        authorization = string.format('Basic %s',basicb64)
        ngx.req.set_header('Authorization', authorization)

        return
      end
    }

    proxy_pass http://127.0.0.1:3080;
  }

  # noTELNET: http://host/console/port/ -> http://host:port (websocket)
  location /noTELNET
  {
    # Basic authentication
    auth_basic "Vigrid's access, who are you ?";
    auth_basic_user_file /home/gns3/etc/vigrid-passwd;

    auth_request     /auth;
    auth_request_set $auth_status $upstream_status;

    rewrite     ^/noTELNET/(.*)$ /noTELNET/$1$is_args$args break;
    
    proxy_pass  http://$server_addr:$1$is_args$args;
    proxy_redirect off;

    # websocket
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'Upgrade';
    #
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # proxy_set_header X-Forwarded-Host $server_name;  
  }

  # noVNC: host:port/path should also become host/console/port/path
  # http://host/console/port/path -> http://host:port/path (websocket)
  location /noVNC
  {
    # Basic authentication
    auth_basic "Vigrid's access, who are you ?";
    auth_basic_user_file /home/gns3/etc/vigrid-passwd;

    auth_request     /auth;
    auth_request_set $auth_status $upstream_status;

    # adding websockify path
    # rewrite to extract regex (port to redirect to)
    rewrite     ^/noVNC/([0-9]*)/(.*)$ /noVNC/$1/$2$is_args$args break;

    # sending to proxy
    proxy_pass  http://$server_addr:$1/$2$is_args$args;
    proxy_redirect off;

    # websocket
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'Upgrade';
    #
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #proxy_set_header X-Forwarded-Host $server_name;  
  }

  location = /auth
  {
    internal;
    
    proxy_pass             http://localhost:8001;
    proxy_pass_request_body off;
    
    proxy_set_header        Content-Length '';
    proxy_set_header        X-Original-URI $request_uri;
    proxy_set_header        X-Original-Host $host;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Host $server_name;  
  }

  location ~ ^/(images|javascript|js|css|flash|media|static|font)/  {
    expires 7d;
  }

  location ~ /\.ht {
      deny  all;
  }

  try_files $uri $uri/ /index.html?$args /index.htm?$args /index.php?$args;
}
