#!/usr/bin/php
<?php
#################################################################################################################################
##
## This material is part of VIGRID extensions to GNS3 for Trainings & CyberRange designs
##
## (c) Laurent LEVIER for script, designs and technical actions, https://github.com/llevier/
## LICENCE: Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA)
##
## Each dependancies (c) to their respective owners
##
##################################################################################################################################
// hide notices
ini_set('error_reporting', E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED);
error_reporting(E_ERROR | E_PARSE);

print("In order to be able to industrially clone GNS3 Projects over ZFS, you need to prepare the field:
  1- Your project must be in its own ZFS dataset, it can contain sub datasets.
  2- Once your source project is ready, snapshot it with: zfs snapshot pool/dataset@mark, where 'mark' is of your choice.
  3- Provide this ZFS snapshot full name ('pool/dataset@mark') to this command with the -Z flag.
  4- IMPORTANT : destroying the original snapshot will terminate all its ZFS clones !
  
");

# Procedure is :
# 1- zfs snapshot dataset
# 2- zfs clone snapshot clone_dataset
#
# For Project versionning:
# 1- Delete previous project version
# 2- Select appropriate snapshot (associated version)
# 3- zfs clone snapshot clone_dataset
#
# DONT GO TO:
# 3- zfs promote clone_dataset
# because destroying clone_dataset will then enforce destroying of original dataset as well (ZFS bug)

// Genesis home directory
$gns_home="/home/gns3";
$gns_home_projects="/home/gns3/GNS3/projects";

$NAS_SSH="ssh -i /root/.ssh/id_Gargantua Gargantua1";
$NAS_GNS3_DIR="Vstorage/home/gns3/GNS3";
$NAS_GNS_PROJECTS_DIR="Vstorage/home/gns3/GNS3/projects";

// Genesis functions
include "/home/gns3/vigrid/www/site/manager/gns3_functions.php";

// turn off output buffering
ob_implicit_flush();

$SSHauth="ssh -i /home/gns3/.ssh/id_$host -o StrictHostKeyChecking=no";
$SSHdo=$SSHauth." gns3";

$opt=getopt("D:s:S:t:T:r:Z:");

$project_deletion=$opt['D'];
$from_project_snapshot=$opt['Z'];
$from_project_uuid=$opt['s'];
$from_project_name=$opt['S'];
$to_project_uuid=$opt['t'];
$to_project_name=$opt['T'];

$report_file=$opt['r'];

### Verbose level
$verbose=2;

if ($project_deletion!="")
{
  report("Project deletion requested: $project_deletion\n");
  if ($to_project_name=="")
  {
    report("  -T is required to double check\n");
    exit(-1);
  }
  
  $config_file="$gns_home_projects/$project_deletion/$to_project_name.gns3";
  $fd=fopen($config_file,"r");
  if (!$fd) { report("Cant open $config_file !!, exiting\n"); exit(1); }
  fclose($fd);

  $command="zfs destroy -r ".$NAS_GNS_PROJECTS_DIR."/".$project_deletion;
  report(" Command: $command");
  $res=get_exec($command,"",false);
  report("\n (".print_r($res,true).")\n");
  exit;
}


if (($from_project_uuid=="")
 || (!preg_match("/\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b$/",$from_project_uuid))
 || ($from_project_name=="") || ($from_project_snapshot=="") || ($to_project_name==""))
{
  print("$argv[0] arguments:
    [ -D target_project_uuid ] project deletion
    -s source_project_uuid
    -Z source_projet_snapshot_name
    -S source_project_name
    -T target_project_name
    [ -r report_file ]\n");

  exit(1);
}

report("Source project UUID: $from_project_uuid ($from_project_name) to clone as $to_project_name\n");

// get controller configuration to extract Genesis hosts...
// $gns_controller=gns_getcontrollers();
// report("Opening 2b686034-dd81-49d7-a0d3-c9e4cadbec51\n");
// gns_project_command($gns_controller,"172.16.100.45","2b686034-dd81-49d7-a0d3-c9e4cadbec51","open");

// exit;
// if ($report_file) { unlink($report_file); }

report("OverlayFS cloning project $from_project_uuid\n\n");

// Phase 1: ensuring $gns_home_projects is a ZFS volume...
// Phase 2 (option): generating a target project free UUID...
// Phase 3: Replicating project data tree...
// Phase 4: Generating UUID pairs...
  // 4a: extract all UUIDs from GNS3 host...
  // 4b: extract all UUIDs from source project configuration files...
  // 4c: generating pairs...
// Phase 5: Generating console port pairs
  // 5a: extracting console port range...
  // 5b: Extracting all console ports...
  // 5c: Extracting project console ports...
  // 5d: Generating new unique console port pairs
// Phase 6: managing MAC addresses
  // 6a: extracting unique MAC addresses on target host
  // 6b: extracting unique MAC addresses of project
  // 6c: generating new UUID pairs
// Phase 7: finalizing target...
  // 7a: renaming target project file to new name: $to_project_name.
  // 7b: updating target project file to change UUIDs, MAC addresses & console ports...
  // 7c: replacing target project configuration file with new temp file...
  // 7d: renaming target nodes directories with new UUIDs...
  // 7e: changing target directory ownership to gns3:gns3...
// Phase 8: Sending SIGHUP to target GNS3 server & load project...

report("Phase 1: ensuring $gns_home_projects exists...\n");
$cwd=getcwd();
chdir($gns_home_projects);
$cwd_new=`/bin/pwd`;
$cwd_new=trim($cwd_new);

report("  Real directory is $cwd_new\n");
$zfs_mounts=get_exec("zfs list -pH -o mountpoint","",false);

$on_zfs=0;
for ($i=0;$i<sizeof($zfs_mounts);$i++)
{
  $zfs_mounts[$i]=trim($zfs_mounts[$i]);
  // report("Comparing $zfs_mounts[$i] vs $cwd_new\n");
  if (strcmp($zfs_mounts[$i],$cwd_new)==0) { $on_zfs=1; break; }
}

if ($on_zfs==0)
{
  report("  $cwd_new is not the top of a ZFS dataset, exiting\n");
  exit(-1);
}
chdir($cwd);

// 2- Generating UUID for project
report("Phase 2 (option): generating a target project free UUID...\n");
$to_project_uuid_pairs=array();
while (1)
{
  if ($to_project_uuid=="")
  { $to_project_uuid=gen_uuid(); }
  
  if (!is_dir("$gns_home_projects/$to_project_uuid")) { break; }

  report("  $to_project_uuid already existing, let's try again..\n");
  sleep (1);
}
report("  Target project UUID for $to_project_name will be $to_project_uuid\n");
array_push($to_project_uuid_pairs,"$from_project_uuid:$to_project_uuid");

report("Phase 3: Replicating project data tree...\n");
report("  Cloning (ZFS clone of master snapshot) project data directory...\n");

$command="zfs clone \"$NAS_GNS_PROJECTS_DIR/$from_project_uuid@$from_project_snapshot\" \"$NAS_GNS_PROJECTS_DIR/$to_project_uuid\"";
// print("C=$command\n");
$res=get_exec($command,"    zfs clone: ",true);

// Sanity wait, if NFS client !!
// report("Sleeping 60secs (NFS acdir+acregmax=50s)...");
// sleep (60);

// $res=get_exec("ls -l $gns_home_projects >/dev/null 2>/dev/null" ,"    ",true);
// find_all_files(0,"$gns_home_projects",$res);

// while(1)
// {
  // $fd=fopen("$gns_home_projects/$to_project_uuid/$from_project_name.gns3","r");
  // if (!$fd)
  // {
    // report("    $gns_home_projects/$to_project_uuid/$from_project_name.gns3 not yet present, sleeping 5s\n");
    // sleep (5);
  // }
  // else { fclose($fd); break; }
// }

// Phase 4: Generating UUID pairs
report("\n");
report("Phase 4: Generating UUID pairs...\n");

report("  4a: extract all UUIDs from GNS3 host...\n");
$command="cat ".$gns_home_projects."/*/*.gns3";
$res=get_exec($command,"",false);

$all_project_uuid=preg_grep("/\"\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b\"/",$res);
usort($all_project_uuid, 'compare_name');
report("      I found ".sizeof($all_project_uuid)." unique UUIDs on target host\n");

for ($u=0;$u<sizeof($all_project_uuid);$u++)
{
  $all_project_uuid[$u]=preg_replace("/^.* \"/","",$all_project_uuid[$u]);
  $all_project_uuid[$u]=preg_replace("/\".*$/","",$all_project_uuid[$u]);
  $all_project_uuid[$u]=rtrim($all_project_uuid[$u]);
}
$uuid_all=$all_project_uuid;

report("  4b: extract all UUIDs from source project configuration files...\n");
$command="cat ".$gns_home_projects."/".$to_project_uuid."/*.gns3";
$res=get_exec($command,"",false);

$from_project_uuid_list=preg_grep("/\"\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b\"/",$res);
usort($from_project_uuid_list, 'compare_name');
report("      I found ".sizeof($from_project_uuid_list)." unique UUIDs on project\n");

for ($u=0;$u<sizeof($from_project_uuid_list);$u++)
{
  $from_project_uuid_list[$u]=preg_replace("/^.* \"/","",$from_project_uuid_list[$u]);
  $from_project_uuid_list[$u]=preg_replace("/\".*$/","",$from_project_uuid_list[$u]);
  $from_project_uuid_list[$u]=rtrim($from_project_uuid_list[$u]);
}

// 4- generate new uuid pairs for objects
report("  4c: generating pairs...\n");
for ($i=0;$i<sizeof($from_project_uuid_list);$i++)
{
  $t=preg_replace("/^.*$from_project_uuid/","",$from_project_uuid_list[$i]);
  $t=str_replace(PHP_EOL,"",$t);

  if (preg_match("/\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b$/",$t))
  {
    $t_arr=preg_split("/\//",$t);
    $t_uuid=$t_arr[sizeof($t_arr)-1];

    while (preg_grep("/$t_uuid_new/",$uuid_all)) { $t_uuid_new=gen_uuid(); }
    if ($verbose>=1) { report("  Detected $t_uuid, new will be $t_uuid_new\n"); }
    array_push($to_project_uuid_pairs,"$t_uuid:$t_uuid_new");
    array_push($uuid_all,$t_uuid_new);

  }
}

// 5- target: all unique consoles
report("Phase 5: Generating console port pairs\n");

report("  5a: extracting console port range...\n");
$command="cat ".$gns_home."/.config/GNS3/gns3_server.conf";
$res=get_exec($command,"",false);
for ($i=0;$i<sizeof($res);$i++)
{ $res[$i]=ltrim(rtrim($res[$i])); }

$line=preg_grep("/^console_start_port_range.*=/",$res);
$console_port_start=ltrim(rtrim(preg_replace("/^.*=/","",reset($line))));
$line=preg_grep("/^console_end_port_range.*=/",$res);
$console_port_end=ltrim(rtrim(preg_replace("/^.*=/","",reset($line))));
report("  Console & telnet ports range on target host is from $console_port_start to $console_port_end.\n");

report("  5b: Extracting all console ports...\n");
$command="cat ".$gns_home_projects."/*/*.gns3";
$res=get_exec($command,"",false);
for ($i=0;$i<sizeof($res);$i++)
{ $res[$i]=ltrim(rtrim($res[$i])); }

$consoles_all=preg_grep("/\"console\": /",$res);
$consoles_total=sizeof($consoles_all);
usort($consoles_all, 'compare_name');
report("    I found $consoles_total console ports on target host...\n");

for ($u=0;$u<sizeof($consoles_all);$u++)
{
  $consoles_all[$u]=preg_replace("/^.*: /","",$consoles_all[$u]);
  $consoles_all[$u]=preg_replace("/,.*$/","",$consoles_all[$u]);
  $consoles_all[$u]=ltrim(rtrim($consoles_all[$u]));
}

report("  5c: Extracting project console ports...\n");
$command="cat $gns_home_projects/$to_project_uuid/*.gns3";
$res=get_exec($command,"",false);
$consoles_project=preg_grep("/\"console\": /",$res);
$console_needs=sizeof($consoles_project);
report("    Project needs $console_needs unique console ports...\n");
usort($consoles_project, 'compare_name');

// 5d- generate new console ports
report("  5d: Generating new unique console port pairs\n");
for ($i=0;$i<$console_needs;$i++)
{
  $consoles_project[$i]=preg_replace("/^.*\"console\": /","",$consoles_project[$i]);
  $consoles_project[$i]=preg_replace("/,.*$/","",$consoles_project[$i]);
  $consoles_project[$i]=ltrim(rtrim($consoles_project[$i]));

  if ($verbose>=3) { report("    consoles_all=".implode(",",$consoles_all)."\n"); }

  $new=".*";
  if ($consoles_project[$i]>0)
  {
    while(preg_grep("/^$new$/",$consoles_all))
    { $new=rand($console_port_start,$console_port_end); }

    array_push($consoles_all,$new);
    $consoles_project[$i].=":".$new;

    if ($verbose>=1) { report("      Console ".preg_replace("/:/"," -> ",$consoles_project[$i])."\n"); }
  }
}
// 6- target: extract all unique MAC
report("Phase 6: managing MAC addresses\n");
report("  6a: extracting unique MAC addresses on target host\n");
$command="cat ".$gns_home_projects."/*/*.gns3";
$res=get_exec($command,"",false);

$all_project_mac=preg_grep("/\"mac_address\": /",$res);
usort($all_project_mac, 'compare_name');
report("    I found ".sizeof($all_project_mac)." unique MACs on target host\n");

for ($u=0;$u<sizeof($all_project_mac);$u++)
{
  $all_project_mac[$u]=preg_replace("/^.* \"/","",$all_project_mac[$u]);
  $all_project_mac[$u]=preg_replace("/\".*$/","",$all_project_mac[$u]);
  $all_project_mac[$u]=rtrim($all_project_mac[$u]);
}

$mac_all=$all_project_mac;

report("  6b: extracting unique MAC addresses of project\n");
$command="cat $gns_home_projects/$to_project_uuid/*.gns3";
$res=get_exec($command,"",false);

$from_project_uuid_mac=preg_grep("/\"mac_address\": /",$res);
usort($from_project_uuid_mac, 'compare_name');
report("    I found ".sizeof($from_project_uuid_mac)." unique MACs on project\n");

for ($u=0;$u<sizeof($from_project_uuid_mac);$u++)
{
  $from_project_uuid_mac[$u]=preg_replace("/^.* \"/","",$from_project_uuid_mac[$u]);
  $from_project_uuid_mac[$u]=preg_replace("/\".*$/","",$from_project_uuid_mac[$u]);
  $from_project_uuid_mac[$u]=rtrim($from_project_uuid_mac[$u]);
}

$from_project_uuid_mac_new=array();

$mac_new="";
for ($u=0;$u<sizeof($from_project_uuid_mac);$u++)
{
  while (preg_grep("/$mac_new/",$mac_all)) { $mac_new=gen_mac(); }
  array_push($from_project_uuid_mac_new,$mac_new);
  array_push($mac_all,$mac_new);
}

// 6b- generate new macaddr pairs
report("  6c: generating new UUID pairs\n");
for ($u=0;$u<sizeof($from_project_uuid_mac);$u++)
{ 
  $to_project_uuid_mac_pairs[$u]=$from_project_uuid_mac[$u]."-".$from_project_uuid_mac_new[$u];
  if ($verbose>=1) { report("      #".$u.": ".preg_replace("/-/"," -> ",$to_project_uuid_mac_pairs[$u]."\n")); }
}

// 7- update project file of uuid + rename directories uuid + consoles + MAC addresses
report("Phase 7: finalizing target...\n");
report("  7a: renaming target project file to new name: $to_project_name.\n");
$config_file="$gns_home_projects/$to_project_uuid/$to_project_name.gns3";
// $command="mv '$gns_home_projects/$to_project_uuid/$from_project_name.gns3' '$config_file'";
// print("      C=$command\n");
// $res=get_exec($command,"",true);
$rc=rename("$gns_home_projects/$to_project_uuid/$from_project_name.gns3",$config_file);
if (!$rc)
{ report("      Renaming ($gns_home_projects/$to_project_uuid/$from_project_name.gns3 -> $config_file) failed, exiting\n"); exit(-1); }

$fd=fopen($config_file,"r");
if (!$fd) { report("Cant open $config_file !!, stopping\n"); exit(1); }

report("  7b: updating target project file to change UUIDs, MAC addresses & console ports...\n");
$config=array();
while (($line = fgets($fd, 4096)) !== false)
{ array_push($config,$line); }
fclose($fd);

for ($i=0;$i<sizeof($config);$i++)
{
  if ($verbose==2)
  { report("Config: $config[$i]"); }

  if (strpos($config[$i],"\"$from_project_name\""))
  // if (preg_match("/\"$from_project_uuid\"/i",$config[$i]))
  {
    // if ($verbose==2)
    // { print("Detected project name: $from_project_name\n"); }
  
    // $config[$i]=preg_replace("/\"$from_project_uuid\"/","\"".$to_project_uuid."\"",$config[$i]);
    $count=1;
    $config[$i]=str_replace("\"$from_project_name\"","\"$to_project_name\"",$config[$i],$count);
    
    if ($verbose==2)
    { report("   New: $config[$i]"); }
  }
  else if (preg_match("/\"\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b\"/",$config[$i])) // uuid
  {
    $uuid_type=preg_replace("/\": .*$/","",$config[$i]);
    $uuid_type=preg_replace("/^.*\"/","",$uuid_type);
    $uuid_type=ltrim(rtrim($uuid_type));
    
    $pattern="/^.*\"".$uuid_type."\": /";
    $uuid_value=preg_replace("/^.*\"".$uuid_type."\": /","",$config[$i]);
    $uuid_value=preg_replace("/[\",]/","",$uuid_value);
    $uuid_value=ltrim(rtrim($uuid_value));

    // if ($verbose==2)
    // { report("Found UUID type $uuid_type, value=$uuid_value\n"); }
  
    // if (preg_match("/template_id/i",$uuid_type))
    // {
      // print("\n  *** WARNING !!! Template ID $uuid_value might need to exist on target host $to_host ***\n");
    // }
    if (preg_match("/project_id/i",$uuid_type))
    {
      $config[$i]=preg_replace("/$from_project_uuid/",$to_project_uuid,$config[$i]);
    }
    else
    {
      // if ($verbose==2)
      // { report("  Replacing $uuid_type($uuid_value)\n"); }
      if (!($line=preg_grep("/^$uuid_value:/",$to_project_uuid_pairs)))
      {
        report("ERROR in $config_file : cant find UUID $uuid_value\n");
        sleep (1);
      }
      else
      {
        $uuid_new=preg_replace("/^.*:/","",reset($line));
        $config[$i]=preg_replace("/$uuid_value/",$uuid_new,$config[$i]);
      }
    }
    if ($verbose==2)
    { report("   New: $config[$i]"); }
  }
  else if (preg_match("/\"mac_address\": /",$config[$i])) // MAC
  {
    $mac_value=preg_replace("/^.*\"mac_address\": \"/","",$config[$i]);
    $mac_value=preg_replace("/\".*$/","",$mac_value);
    $mac_value=ltrim(rtrim($mac_value));

    // if ($verbose==2)
    // { report("MAC: $mac_value"); }

    if (!($line=preg_grep("/^$mac_value-/",$to_project_uuid_mac_pairs)))
    {
      report("ERROR in $config_file: cant find MAC $mac_value\n");
      sleep (1);
    }
    else
    {
      $mac_new=preg_replace("/^.*-/","",reset($line));
      $config[$i]=preg_replace("/$mac_value/",$mac_new,$config[$i]);
    }

    if ($verbose==2)
    { report("   New: $config[$i]"); }
  }
  else if (preg_match("/^.*\"console\": /",$config[$i])) // console
  {
    $console_value=preg_replace("/^.*\"console\": /","",$config[$i]);
    $console_value=preg_replace("/[\",]/","",$console_value);
    $console_value=ltrim(rtrim($console_value));

    // if ($verbose==2)
    // { report("Console port = -$console_value-"); }

    if ($console_value>0)
    {
      if (!($line=preg_grep("/^$console_value:/",$consoles_project)))
      {
        report("ERROR in $config_file : cant find CONSOLE $console_value\n");
        sleep (1);
      }
      else
      {
        $console_new=preg_replace("/^.*:/","",reset($line));
        $console_new=preg_replace("/[\",]/","",$console_new);
        $config[$i]=preg_replace("/: $console_value/",": $console_new",$config[$i]);
      }
    }

    if ($verbose==2)
    { report("   New: $config[$i]"); }
  }
}
$tmpfile=tempnam("/tmp", "project_$to_project_uuid");
report("    Writing new configuration file ($tmpfile)...\n");

$fd=fopen($tmpfile,"w");
if (!$fd) { report("Cant create $tmpfile !!, stopping, recalling a copy has been created on $to_host !!\n"); exit(1); }
for ($i=0;$i<sizeof($config);$i++)
{ fwrite($fd,$config[$i]); }
fclose($fd);

report("  7c: replacing target project configuration file with $tmpfile...\n");
// $command="mv $tmpfile '$config_file'";
// $res=get_exec($command,"",false);
$rc=rename($tmpfile,$config_file);
unlink($tmpfile);
report("\n");

// 7d- rename node directories with new uuids
report("  7d: renaming target nodes directories with new UUIDs...");
// find is failing with NAS using ZFS subvolumes (loop detected)
// $command="find $gns_home_projects/$to_project_uuid -type d 2>/dev/null";
// $dirs=get_exec($command,"",false);
find_all_files(1,"$gns_home_projects/$to_project_uuid",$dirs);
$dirs_uuid=preg_grep("/\/\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b$/",$dirs);
usort($dirs_uuid, 'compare_name');

if ($verbose>=1) { report("\n"); }
for ($d=0;$d<sizeof($dirs_uuid);$d++)
{
  if (preg_match("/\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b$/",$dirs_uuid[$d]))
  {
    for ($u=0;$u<sizeof($to_project_uuid_pairs);$u++)
    {
      $t=preg_split("/:/",$to_project_uuid_pairs[$u]);
      $uuid_source=$t[0];
      $uuid_target=$t[1];
      
      if (preg_match("/\/$uuid_source$/",$dirs_uuid[$d]))
      {
        $dir_source=rtrim($dirs_uuid[$d]);
        $dir_target=rtrim(preg_replace("/$uuid_source/",$uuid_target,$dir_source));
        
        // $command="mv $dir_source $dir_target";

        if ($verbose>=1)
        { report("      Moving $dir_source\n          To $dir_target..."); }
        $rc=rename($dir_source,$dir_target);
        // system($command,$rc);
        if ($rc==true)
        { if ($verbose) { report("done...\n"); } }
        else
        { if ($verbose) { report("move from $dir_source to $dir_target failed (rc=$rc)...\n"); } }

        break;
      }
    }
  }
}
report("\n");

// 7e- chmod + chown target project dir
report("  7e: changing target directory ownership to gns3:gns3...");
$command="chown -R gns3:gns3 $gns_home_projects/$to_project_uuid/";
system($command,$rc);
if (!$rc)  { report("      chmod FAIL: $files[$i]\n"); }

report("      changing target directory permissions...");
$command="chmod -R ug+rw $gns_home_projects/$to_project_uuid/";
system($command,$rc);
if (!$rc)  { report("      chmod FAIL: $files[$i]\n"); }

// find_all_files(0,"$gns_home_projects/$to_project_uuid",$files);
// for ($i=0;$i<sizeof($files);$i++)
// {
  // $files[$i]=trim($files[$i]);
  // if (!chown($files[$i],"gns3")) { report("      chown FAIL: $files[$i]\n"); }
  // if (!chgrp($files[$i],"gns3")) { report("      chgrp FAIL: $files[$i]\n"); }
  
  // $command="chmod ug+rw $files[$i]";
  // system($command,$rc);
  // if (!$rc)  { report("      chmod FAIL: $files[$i]\n"); }
// }
// report("\n");

// 8- SIGHUP to gns3-server
report("Phase 8: Sending SIGHUP to target GNS3 server & load project...");
$command="ps axo pid,command|grep \"gns3-server\"|grep -v grep 2>/dev/null";
$res=get_exec($command,"",false);
$line=ltrim($res[0]);
$pid=preg_split("/[\s ]+/",$line);
if ($pid[0]>0)
{
  if (posix_kill($pid[0],SIGHUP)) // Sending SIHGUP to server for reloading...
  { report("sent to $pid[0]\n"); }
  else
  { report("cant send to $pid[0]\n"); }
}
else
{ report("Cant get PID of gns3-server to send it a SIGHUP..."); }

report("      Finally opening target project...");

// gns_project_command($gns_controller,$to_host,$to_project_uuid,"open");
report("done\n");

$from_project_uuid=$opt['s'];
$from_project_name=$opt['S'];
$to_project_name=$opt['T'];

report("Cloning $from_project_name ($from_project_uuid) as $to_project_name -> ### SUCCESS ###\n");

// print("Erasing $to_project_uuid_dir...\n");
// $res=get_exec("rm -rf $to_project_uuid_dir","",true);

exit(0);

function get_exec($command,$prefix,$display)
{
  $res=array();

  $fd=popen("$command 2>&1","r");
  while (!feof($fd))
  {
    $line=fgets($fd,4096);
    array_push($res,$line);
    if ($display) { report($prefix.$line); ob_implicit_flush(); }
  }
  $rc=pclose($fd);
  
  return($res);
}

function gen_uuid() {
  return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
    // 32 bits for "time_low"
    random_int( 0, 0xffff ), random_int( 0, 0xffff ),
    // 16 bits for "time_mid"
    random_int( 0, 0xffff ),
    // 16 bits for "time_hi_and_version",
    // four most significant bits holds version number 4
    random_int( 0, 0x0fff ) | 0x4000,
    // 16 bits, 8 bits for "clk_seq_hi_res",
    // 8 bits for "clk_seq_low",
    // two most significant bits holds zero and one for variant DCE1.1
    random_int( 0, 0x3fff ) | 0x8000,
    // 48 bits for "node"
    random_int( 0, 0xffff ), random_int( 0, 0xffff ), random_int( 0, 0xffff )
  );
}

function gen_mac()
{
  $mac=str_split(md5(random_int(0,0xffffff)),2);
   
  return sprintf( '0c:%s:%s:%s:%s:00',$mac[0],$mac[1],$mac[2],$mac[3]);

  // return sprintf( '%02x:%02x:%02x:%02x:%02x:%02x',
    // random_int( 0, 0x10 ),
    // random_int( 0, 0xff ),
    // random_int( 0, 0xff ),
    // random_int( 0, 0xff ),
    // random_int( 0, 0xff ),
    // random_int( 0, 0x10 )
  // );
}

function clean_array($var)
{
  return ($var !== NULL && $var !== FALSE && $var !== "");
}

function report($text)
{
  global $report_file;
  
  if ($report_file!="")
  {
    $fd=fopen($report_file,"a");
    if (!$fd) { print("Cant append $report_file !!, stopping\n"); }

    fwrite($fd,$text);

    fclose($fd);
  }
  else { print $text; }
}

function find_all_files($mode,$dir, &$results = array())
{
  $files = scandir($dir);

  foreach ($files as $key => $value)
  {
    $path = realpath($dir . DIRECTORY_SEPARATOR . $value);
    if (!is_dir($path))
    {
      // mode=0 -> all, mode=1 -> only dirs
      if ($mode==0) { $results[] = $path; }
    }
    else if ($value != "." && $value != "..")
    {
      find_all_files($mode,$path, $results);
      $results[] = $path;
    }
  }
  return $results;
}


?>
