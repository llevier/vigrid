#!/usr/bin/php
<?php

// #################################################################################################################################
// #
// # This material is part of VIGRID extensions to GNS3 for Trainings & CyberRange designs
// #
// # (c) Laurent LEVIER for script, designs and technical actions, https://github.com/llevier/
// # LICENCE: Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA)
// #
// # Each dependancies (c) to their respective owners
// #
// ##################################################################################################################################

// hide notices
ini_set('error_reporting', E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED);
error_reporting(E_ERROR | E_PARSE);

// GNS3 nas-load functions
include "/Vstorage/GNS3/vigrid/bin-nas/nas-load_functions.php";

// turn off output buffering
ob_implicit_flush();

$me=$argv[0];

$usage="$me [ -F ] [ -R Vigrid_Storage_Root ] [ -N Network_Filter ] [ -D Disk_Filter ] where filters is a list of coma separated devices";

$opt=getopt("R:N:D:hF");
$vigrid_storage_root=$opt['R'];
$filter_net=$opt['N'];
$filter_disk=$opt['D'];

$freebsd=0;
if (isset($opt['F'])) { $freebsd=1; }
// Under FreeBSD, precious tools might be:
//   systat -ifstat 1 (network stats monitoring per second)
//   systat -iostat 1 (disk IO stats monitoring per second)
//   systat -zarc 1   (ZFS ARC monitoring per second)
//   systat -vmstat 1 (multiple indicators (CPU, physical disk loads etc) monitoring per second) 
//   zpool iostat -vl Vstorage 1 (ZFS iostat monitoring per second)

// If you have a hardware RAID controller, you might appreciate some commands: mfiutil, megacli...
// Some hints:
// - https://blog.koehntopp.info/2017/06/23/on-cache-problems-and-what-they-mean-for-the-future.html

if (isset($opt['h'])) { print($usage."\n"); exit(0); }
  
if ($freebsd==0) # Linux whatever
{
  $t=file('/proc/fs/nfsd/threads');
  $nfsd_threads=trim($t[0]);

  $t=array_values(preg_grep("/^RPCNFSDCOUNT=/",file('/etc/default/nfs-kernel-server')));
  $f=explode("=",trim($t[0]));
  $nfsd_config=$f[1];

}
else if ($freebsd==1)
{
  $nproc=preg_replace("/^.*: /","",trim(shell_exec('sysctl hw.ncpu')));
  $nfsd_config=preg_replace("/^.*: /","",trim(shell_exec('sysctl vfs.nfsd.maxthreads')));
}

$cpu_wa_trend_size=30;
$cpu_wa_trend_values=array();

while (true)
{
  $hostname=gethostname();

  // Get last lines from /var/log/vigrid-load.log
  $load_array=VigridLOADextract('/var/log/vigrid-load.log');
  
  // Get associated CPU values
  $cpu=VigridLOADgetcpu($load_array);

  $nproc=$cpu['nproc'];
  
  // At the first time, set history to latest value
  if (sizeof($cpu_wa_trend_values)==0)
  {
    for ($i=0;$i<$cpu_wa_trend_size;$i++)
    { array_push($cpu_wa_trend_values,$cpu['cpu_wa_perf']); }
  }
  
  array_push($cpu_wa_trend_values,$cpu_wa_perf);
  array_shift($cpu_wa_trend_values);
  
  $text="";
  $disp_cpu_wa_trend="";

  $cpu_wa_trend=array_sum($cpu_wa_trend_values)/$cpu_wa_trend_size;
  
  if ($cpu_wa_trend>$prev_cpu_wa_trend)     { $text="INCREASING"; }
  elseif ($cpu_wa_trend<$prev_cpu_wa_trend) { $text="DECREASING"; }

  $prev_cpu_wa_trend=$cpu_wa_trend;
  
  if ($text!="")
  { $disp_cpu_wa_trend=sprintf(", last %ds: $text",$cpu_wa_trend_size); }
  
  system('clear');

  print("$hostname Vigrid monitoring tracker

NFSd RPC CPU: $nfsd_threads nfsd / $nfsd_config config / $nproc possible total vCPU

LOAD AVERAGE: 1m=".$cpu['load1']." (".$cpu['load_perf1']."%), 5m=".$cpu['load5']." (".$cpu['load_perf5']."%), 15m=".$cpu['load15']." (".$cpu['load_perf15']."%)

CPU load: ".$cpu['cpu_load']."%   IO waits: ".$cpu['cpu_wa']." (".$cpu['cpu_wa_perf']."%)$disp_cpu_wa_trend

");

  // Disk filter ?
  if (!empty($filter_disk)) { $filters_disk=explode(",",$filter_disk); }

  // Get associated DISK values
  $disks=VigridLOADgetdisk($load_array,$filters_disk);

  $name_len=0;
  foreach($disks as $names => $values)
  { if (strlen($names)>$name_len) { $name_len=strlen($names); } }
  
  foreach($disks as $names => $disk_cur)
  {
    $rate_in=$disk_cur['rsect'];
    $rate_out=$disk_cur['wsect'];
    
    $unit_in="B";
    $unit_out="B";
    
    if ($rate_out>1024) { $rate_out=sprintf("%d",$rate_out/1024); $unit_out="KB"; }
    if ($rate_in>1024)  { $rate_in=sprintf("%d",$rate_in/1024); $unit_in="KB"; }
    
    if ($rate_out>1024) { $rate_out=sprintf("%d",$rate_out/1024); $unit_out="MB"; }
    if ($rate_in>1024)  { $rate_in=sprintf("%d",$rate_in/1024); $unit_in="MB"; }
    
    $max_in =$disk_cur['rsect_max'];
    $max_out=$disk_cur['wsect_max'];
    
    $max_unit_in="B";
    $max_unit_out="B";

    if ($max_out>1024) { $max_out=sprintf("%d",$max_out/1024); $max_unit_out="KB"; }
    if ($max_in>1024)  { $max_in=sprintf("%d",$max_in/1024); $max_unit_in="KB"; }
    
    if ($max_out>1024) { $max_out=sprintf("%d",$max_out/1024); $max_unit_out="MB"; }
    if ($max_in>1024)  { $max_in=sprintf("%d",$max_in/1024); $max_unit_in="MB"; }

    $size="%-".$name_len."s";
    printf("Disk $size: READ=%4d%2s/s (MAX=%4d%2s/s)  WRITE=%4d%2s/s (MAX=%4d%2s/s)\n",$names,$rate_in,$unit_in,$max_in,$max_unit_in,$rate_out,$unit_out,$max_out,$max_unit_out);
    printf("     $size  READ=%4d r/s (MAX=%4d),     WRITE=%4d w/s (MAX=%4d)\n","",$disk_cur['rs'],$disk_cur['rs_max'],$disk_cur['ws'],$disk_cur['ws_max']);
    printf("     $size  WAIT=%4d io/s (MAX=%4d)\n\n","",$disk_cur['io_pending'],$disk_cur['io_pending_max']);
  }

  // Same for net
  if (!empty($filter_net)) { $filters_net=explode(",",$filter_net); }

  // Get associated NET values
  $nets=VigridLOADgetnet($load_array,$filters_net);
  
  $name_len=0;
  foreach($nets as $names => $values)
  { if (strlen($names)>$name_len) { $name_len=strlen($names); } }
  
  foreach($nets as $names => $net_cur)
  {
    $rate_in=$net_cur['bytes_in'];
    $rate_out=$net_cur['bytes_out'];
    
    $unit_in="B";
    $unit_out="B";
    
    if ($rate_out>1024) { $rate_out=sprintf("%d",$rate_out/1024); $unit_out="KB"; }
    if ($rate_in>1024)  { $rate_in=sprintf("%d",$rate_in/1024); $unit_in="KB"; }
    
    if ($rate_out>1024) { $rate_out=sprintf("%d",$rate_out/1024); $unit_out="MB"; }
    if ($rate_in>1024)  { $rate_in=sprintf("%d",$rate_in/1024); $unit_in="MB"; }
    
    $max_in =$net_cur['bytes_in_max'];
    $max_out=$net_cur['bytes_out_max'];
    
    $max_unit_in="B";
    $max_unit_out="B";

    if ($max_out>1024) { $max_out=sprintf("%d",$max_out/1024); $max_unit_out="KB"; }
    if ($max_in>1024)  { $max_in=sprintf("%d",$max_in/1024); $max_unit_in="KB"; }
    
    if ($max_out>1024) { $max_out=sprintf("%d",$max_out/1024); $max_unit_out="MB"; }
    if ($max_in>1024)  { $max_in=sprintf("%d",$max_in/1024); $max_unit_in="MB"; }

    $size="%-".$name_len."s";
    printf("Net $size: OUT=%4d%2s/s (MAX=%4d%2s/s), IN=%4d%2s/s (MAX=%4d%2s/s), NIC MAX=%4dMb/s\n",$names,$rate_out,$unit_out,$max_out,$max_unit_out,$rate_in,$unit_in,$max_in,$max_unit_in,$net_cur['speed']);
  }

  sleep(1);
}
