#!/usr/bin/php
<?php

// #################################################################################################################################
// #
// # This material is part of VIGRID extensions to GNS3 for Trainings & CyberRange designs
// #
// # (c) Laurent LEVIER for script, designs and technical actions, https://github.com/llevier/
// # LICENCE: Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA)
// #
// # Each dependancies (c) to their respective owners
// #
// ##################################################################################################################################

global $handle;

function report($text)
{
  global $log_file;

  if ($log_file!="")
  {    
    $fd=fopen($log_file,"a");
    if (!$fd) { report("Cant append $log_file !!, stopping\n"); }

    fwrite($fd,"$text");
    fclose($fd);
  }
  else print $text;
}

function sig_handler($signo)
{
  if (($signo==SIGTERM) || ($signo==SIGINT))
  {
    report("Received SIGTERM or SIGINT, Vigrid-load exiting at ".strftime("%Y/%m/%d %H:%M:%S",time()).".\n");

    proc_terminate($handle,$signo);

    report("Exiting at ".strftime("%Y/%m/%d %H:%M:%S",time()).".\n");
    exit(0);
  }

  // other signals, normally useless
  report("Received signal $signo !!");
}

if (!function_exists('get_exec'))
{
  function get_exec($command,$prefix,$display)
  {
    $res=array();

    $fd=popen("$command 2>&1","r");
    while (!feof($fd))
    {
      $line=fgets($fd,4096);
      array_push($res,$line);
      if ($display) { report(0,$prefix.$line); ob_implicit_flush(); }
    }
    $rc=pclose($fd);
    
    return(array($rc,$res));
  }
}

$daemon=0;
$freebsd=0;
$verbose=0;

// hide notices
ini_set('error_reporting', E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED);
error_reporting(E_ERROR | E_PARSE);

// turn off output buffering
ob_implicit_flush();

$usage="Usage: $0 -l logfile [ -R Storage_ROOT ] [ -v ] [ -d # ] [ -F ] [ -N net_filter ] [ -D disks_filter ]";
$usage_freebsd="
FreeBSD is not ready yet. Please consider relaying on:
  systat -ifstat 1 (network stats monitoring per second)
  systat -iostat 1 (disk IO stats monitoring per second)
  systat -zarc 1   (ZFS ARC monitoring per second)
  systat -vmstat 1 (multiple indicators (CPU, physical disk loads etc) monitoring per second) 
  zpool load -vl Vstorage 1 (ZFS load monitoring per second)  
\n";

$opt=getopt("R:l:d:N:D:Fv");
if (isset($opt['v'])) { $verbose=1; }
if (isset($opt['d'])) { $delay=$opt['d']; }
if (isset($opt['F'])) { $freebsd=1; }
if (isset($opt['N'])) { $filter_net=$opt['N']; }
if (isset($opt['D'])) { $filter_disk=$opt['D']; }

$vigrid_storage_root=$opt['R'];
$log_file=$opt['l'];

if ($delay==0) { $delay=1; }

if ($vigrid_storage_root=="") { $vigrid_storage_root="/home/gns3/GNS3"; }

$usage_show=0;
// if ($log_file=="")  { $usage_show=1; }
if ($usage_show==1) { print "Usage: $usage\n"; exit(1); }

if ($verbose==1)
{
  print("Vigrid Storage Root = $vigrid_storage_root\n");
  print("log file            = $log_file\n");
}

# Launch collector, via proc_open since process death does not close popen children
declare(ticks = 1);
pcntl_signal(SIGTERM,"sig_handler");
pcntl_signal(SIGINT ,"sig_handler");

if ($freebsd==0)
{
  $source_cpu ="/proc/stat";
  $source_disk="/proc/diskstats";
  $source_net ="/proc/net/dev";
}
elseif ($freebsd==1)
{
  print $usage_freebsd;
  exit(1);
}

while (1)
{
  if ($filter_disk=="") // no filter, must find by myself then
  {
    # Identify ZFS pool
    list($rc,$res)=get_exec("zfs mount","",false);
    $res=preg_replace("/[\n\r]$/","",$res);
    
    $storage_regex=preg_replace("/\//","\\\/",$vigrid_storage_root);
    $zfs_pool=preg_grep("/$storage_regex$/",$res);
    $zfs_pool=array_values($zfs_pool);
    $zfs_pool=preg_replace("/\s+.*$/","",$zfs_pool[0]);

    if ($verbose==1) { print ("Vigrid Storage Root pool is $zfs_pool\n"); }

    list($rc,$res)=get_exec("zpool status -P $zfs_pool","",false);
    $disks_array=preg_grep("/\/dev\//",$res);
    $disks_array=preg_replace("/^.*\/dev\//","",$disks_array);
    $disks_array=preg_replace("/\s+.*$/","",$disks_array);
    $disks=implode(" ",$disks_array);

    if ($verbose==1) { print ("ZFS pool $zfs_pool relies on devices ".$disks."\n"); }
  }
  else
  {
    if ($verbose==1) { print ("Disk filtering: $filter_disk.\n"); }
    $disks_array=preg_split("/\s+/",$filter_disk);
  }

  if ($filter_net=="") // again, no filter, must find by myself
  {
    list($rc,$res)=get_exec("ip link show up","",false);
    $res=preg_replace("/[\n\r]$/","",$res);
    $net_array=preg_grep("/ state UP /",$res);
    $net_array=preg_replace("/: <.*$/","",$net_array);
    $net_array=preg_replace("/^.* /","",$net_array);
    $nets=implode(" ",$net_array);

    if ($verbose==1) { print ("Network interfaces UP are ".$nets."\n"); }
  }
  else
  {
    if ($verbose==1) { print ("Net filtering: $filter_net.\n"); }
    $net_array=preg_split("/\s+/",$filter_net);
  }

  $date=microtime(true);

  // ######################################################################################################################
  // Net stats
  $fd=fopen($source_net,"r");
  if (!$fd) { print "### ERROR: Cant open source_net $source_net !!, exiting\n"; exit(1); }

  while (($line = fgets($fd, 4096)) !== false)
  {
    // https://www.kernel.org/doc/html/latest/networking/statistics.html
    $line=trim($line);
    $fields=preg_split("/\s+/",$line);
    $fields=array_values($fields);

    $dev_name=preg_replace("/:/","",$fields[0]);

    if (in_array($dev_name,$net_array))
    {
      $curr_bytes_in[$dev_name]          =intval($fields[1],10);
      $curr_bytes_out[$dev_name]         =intval($fields[9],10);
      
      if ($curr_bytes_in[$dev_name]>$disp_bytes_in_max[$dev_name])   { $disp_bytes_in_max[$dev_name]=$curr_bytes_in[$dev_name]; }
      if ($curr_bytes_out[$dev_name]>$disp_bytes_out_max[$dev_name]) { $disp_bytes_out_max[$dev_name]=$curr_bytes_out[$dev_name]; }

      if ($previous_bytes_in[$dev_name]==0)  { $previous_bytes_in[$dev_name]=$curr_bytes_in[$dev_name]; }
      if ($previous_bytes_out[$dev_name]==0) { $previous_bytes_out[$dev_name]=$curr_bytes_out[$dev_name]; }

      $diff_bytes_in[$dev_name]    =$curr_bytes_in[$dev_name]-$previous_bytes_in[$dev_name];
      $diff_bytes_out[$dev_name]   =$curr_bytes_out[$dev_name]-$previous_bytes_out[$dev_name];

      $previous_bytes_in[$dev_name]  =$curr_bytes_in[$dev_name];
      $previous_bytes_out[$dev_name] =$curr_bytes_out[$dev_name];

      if ($diff_bytes_in[$dev_name]>$diff_bytes_in_max[$dev_name])    { $diff_bytes_in_max[$dev_name] =$diff_bytes_in[$dev_name]; }
      if ($diff_bytes_out[$dev_name]>$diff_bytes_out_max[$dev_name])  { $diff_bytes_out_max[$dev_name]=$diff_bytes_out[$dev_name]; }

      // adjusting & averaging...
      $disp_diff_bytes_in       =$diff_bytes_in[$dev_name]/$delay;
      $disp_diff_bytes_out      =$diff_bytes_out[$dev_name]/$delay;
      $disp_diff_bytes_in_max   =$diff_bytes_in_max[$dev_name]/$delay;
      $disp_diff_bytes_out_max  =$diff_bytes_out_max[$dev_name]/$delay;

      report("$date N $dev_name $disp_diff_bytes_in $disp_diff_bytes_in_max $disp_diff_bytes_out $disp_diff_bytes_out_max\n");
    }
  }
  fclose($fd);

  // ######################################################################################################################
  // Disk stats
  $fd=fopen($source_disk,"r");
  if (!$fd) { print "### ERROR: Cant open source_disk $source_disk !!, exiting\n"; exit(1); }

  while (($line = fgets($fd, 4096)) !== false)
  {
    chop($line);
    
    // https://www.kernel.org/doc/Documentation/ABI/testing/procfs-diskstats
    $fields=preg_split("/\s+/",$line);
    $dev_name=$fields[3];
    if (in_array($dev_name,$disks_array))
    {
      $curr_rs[$dev_name]          =intval($fields[4],10);
      $curr_rsect[$dev_name]       =intval($fields[6],10);
      $curr_r_await[$dev_name]     =intval($fields[7],10);
      $curr_ws[$dev_name]          =intval($fields[8],10);
      $curr_wsect[$dev_name]       =intval($fields[10],10);
      $curr_w_await[$dev_name]     =intval($fields[11],10);
      $curr_io_pending[$dev_name]  =intval($fields[12],10);

      if ($previous_rs[$dev_name]==0)        { $previous_rs[$dev_name]=$curr_rs[$dev_name]; }
      if ($previous_rsect[$dev_name]==0)     { $previous_rsect[$dev_name]=$curr_rsect[$dev_name]; }
      if ($previous_r_await[$dev_name]==0)   { $previous_r_await[$dev_name]=$curr_r_await[$dev_name]; }
      if ($previous_ws[$dev_name]==0)        { $previous_ws[$dev_name]=$curr_ws[$dev_name]; }
      if ($previous_wsect[$dev_name]==0)     { $previous_wsect[$dev_name]=$curr_wsect[$dev_name]; }
      if ($previous_w_await[$dev_name]==0)   { $previous_w_await[$dev_name]=$curr_w_await[$dev_name]; }
      if ($previous_io_pending[$dev_name]==0){ $previous_io_pending[$dev_name]=$curr_io_pending[$dev_name]; }

      $diff_rs[$dev_name]          =$curr_rs[$dev_name]-$previous_rs[$dev_name];
      $diff_rsect[$dev_name]       =$curr_rsect[$dev_name]-$previous_rsect[$dev_name];
      $diff_r_await[$dev_name]     =$curr_r_await[$dev_name]-$previous_r_await[$dev_name];
      $diff_ws[$dev_name]          =$curr_ws[$dev_name]-$previous_ws[$dev_name];
      $diff_wsect[$dev_name]       =$curr_wsect[$dev_name]-$previous_wsect[$dev_name];
      $diff_w_await[$dev_name]     =$curr_w_await[$dev_name]-$previous_w_await[$dev_name];
      $diff_io_pending[$dev_name]  =$curr_io_pending[$dev_name]-$previous_io_pending[$dev_name];

      $previous_rs[$dev_name]        =$curr_rs[$dev_name];
      $previous_rsect[$dev_name]     =$curr_rsect[$dev_name];
      $previous_r_await[$dev_name]   =$curr_r_await[$dev_name];
      $previous_ws[$dev_name]        =$curr_ws[$dev_name];
      $previous_wsect[$dev_name]     =$curr_wsect[$dev_name];
      $previous_w_await[$dev_name]   =$curr_w_await[$dev_name];
      $io_pending[$dev_name]         =$curr_io_pending[$dev_name];

      if ($diff_rs[$dev_name]>$rs_max[$dev_name])                 { $rs_max[$dev_name]=$diff_rs[$dev_name]; }
      if ($diff_rsect[$dev_name]>$rsect_max[$dev_name])           { $rsect_max[$dev_name]=$diff_rsect[$dev_name]; }
      if ($diff_r_await[$dev_name]>$r_await_max[$dev_name])       { $r_await_max[$dev_name]=$diff_r_await[$dev_name]; }
      if ($diff_ws[$dev_name]>$ws_max[$dev_name])                 { $ws_max[$dev_name]=$diff_ws[$dev_name]; }
      if ($diff_wsect[$dev_name]>$wsect_max[$dev_name])           { $wsect_max[$dev_name]=$diff_wsect[$dev_name]; }
      if ($diff_w_await[$dev_name]>$w_await_max[$dev_name])       { $w_await_max[$dev_name]=$diff_w_await[$dev_name]; }

      if ($diff_io_pending[$dev_name]>$io_pending_max[$dev_name]) { $io_pending_max[$dev_name]=$diff_io_pending[$dev_name]; }
      
      // adjusting & averaging...
      $disp_diff_rs          =$diff_rs[$dev_name]/$delay;
      $disp_diff_rsect       =$diff_rsect[$dev_name]*512/$delay;
      $disp_rs_max           =$rs_max[$dev_name]/$delay;
      $disp_rsect_max        =$rsect_max[$dev_name]*512/$delay;
      $disp_diff_r_await     =$diff_r_await[$dev_name]/$delay;
      $disp_r_await_max      =$r_await_max[$dev_name]/$delay;
      $disp_diff_ws          =$diff_ws[$dev_name]/$delay;
      $disp_diff_wsect       =$diff_wsect[$dev_name]*512/$delay;
      $disp_ws_max           =$ws_max[$dev_name]/$delay;
      $disp_wsect_max        =$wsect_max[$dev_name]*512/$delay;
      $disp_diff_w_await     =$diff_w_await[$dev_name]/$delay;
      $disp_w_await_max      =$w_await_max[$dev_name]/$delay;
      $disp_diff_io_pending  =$diff_io_pending[$dev_name]/$delay;
      $disp_io_pending_max   =$io_pending_max[$dev_name]/$delay;

      report("$date D $dev_name ");
      report("$disp_diff_rs $disp_rs_max $disp_diff_rsect $disp_rsect_max ");
      report("$disp_diff_ws $disp_ws_max $disp_diff_wsect $disp_wsect_max ");
      report("$disp_diff_io_pending $disp_io_pending_max\n");
    }
  }
  fclose($fd);

  // ######################################################################################################################
  // CPU stats
  $t=sys_getloadavg();
  $load1=$t[0];
  $load5=$t[1];
  $load15=$t[2];

  if ($freebsd==0)
  {
    $source_res=file($source_cpu);
    if (!$source_res) { print "### ERROR: Cant open source_disk $source_cpu !!, exiting\n"; exit(1); }
    $cpu_line=array_values(preg_grep("/^cpu[0-9]/",$source_res));
    $nproc=sizeof($cpu_line);
    
    $load_perf1=sprintf("%.2f",$load1/$nproc*100);
    $load_perf5=sprintf("%.2f",$load5/$nproc*100);
    $load_perf15=sprintf("%.2f",$load15/$nproc*100);

    // https://www.kernel.org/doc/html/latest/filesystems/proc.html
    
    $cpu_line=array_values(preg_grep("/^cpu\s+/",$source_res));
    $cpu_line=$cpu_line[0];

    $cpu_fields=preg_split("/\s+/",$cpu_line);

    // us: user cpu time (or) % CPU time spent in user space
    // ni: user nice cpu time (or) % CPU time spent on low priority processes
    // sy: system cpu time (or) % CPU time spent in kernel space
    // id: cpu time spent idling
    // wa: cpu time spent to wait for IO
    // hi: hardware irq (or) % CPU time spent servicing/handling hardware interrupts
    // si: software irq (or) % CPU time spent servicing/handling software interrupts
    // st: cpu time spent to wait for another CPU
    
    $cpu_us=intval($cpu_fields[1],10);
    $cpu_ni=intval($cpu_fields[2],10);
    $cpu_sy=intval($cpu_fields[3],10);
    $cpu_id=intval($cpu_fields[4],10);
    $cpu_wa=intval($cpu_fields[5],10);
    $cpu_hi=intval($cpu_fields[6],10);
    $cpu_si=intval($cpu_fields[7],10);
    $cpu_st=intval($cpu_fields[8],10);
  }
  elseif ($freebsd==1)
  {
    print $usage_freebsd;
    exit(1);
  }
  
  // Calculate total CPU spent time 
  $cpu_total=0;
  for ($i=1;$i<=8;$i++)
  { $cpu_total+=intval($cpu_fields[$i],10); }

  $diff_cpu_us=$cpu_us-$prev_cpu_us;
  $diff_cpu_ni=$cpu_ni-$prev_cpu_ni;
  $diff_cpu_sy=$cpu_sy-$prev_cpu_sy;
  $diff_cpu_id=$cpu_id-$prev_cpu_id;
  $diff_cpu_wa=$cpu_wa-$prev_cpu_wa;
  $diff_cpu_hi=$cpu_hi-$prev_cpu_hi;
  $diff_cpu_si=$cpu_si-$prev_cpu_si;
  $diff_cpu_st=$cpu_st-$prev_cpu_st;
  $diff_cpu_total=$cpu_total-$prev_cpu_total;

  $prev_cpu_us=$cpu_us;
  $prev_cpu_ni=$cpu_ni;
  $prev_cpu_sy=$cpu_sy;
  $prev_cpu_id=$cpu_id;
  $prev_cpu_wa=$cpu_wa;
  $prev_cpu_hi=$cpu_hi;
  $prev_cpu_si=$cpu_si;
  $prev_cpu_st=$cpu_st;
  $prev_cpu_total=$cpu_total;

  $diff_usage=sprintf("%.02f",((1024*($diff_cpu_total-$diff_cpu_id)/$diff_cpu_total+5)/10));

  // $disp_diff_cpu_wa=sprintf("%2.2f",$diff_cpu_wa/$nproc);
  $disp_diff_cpu_wa=sprintf("%2.2f",$diff_cpu_wa/$diff_cpu_total*100);

  $disp_diff_cpu_load=sprintf("%2.2f",($diff_cpu_us+$diff_cpu_sy)/$diff_cpu_total*100);
  
  report("$date C cpu $nproc ");
  report("$load1 $load_perf1 $load5 $load_perf5 $load15 $load_perf15 ");
  report("$disp_diff_cpu_load $diff_cpu_wa $disp_diff_cpu_wa\n");
  
  sleep($delay);
}

exit;
?>
